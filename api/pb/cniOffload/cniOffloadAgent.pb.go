// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.6.1
// source: cniOffloadAgent.proto

package cniOffload

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CNIAddRequest gRPC service request to add an interface that is allcoated on the
// host pod to the DPU data path. The fields of the request are added to consider
// the following scenarios
// Programable DPU data path
// Stack based DPU data path
// Interface is part of Secondary CNI network
// Interface is used to offload Primary CNI to DPU
type CNIAddRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PodInfo             *PodDetails          `protobuf:"bytes,1,opt,name=podInfo,proto3" json:"podInfo,omitempty"`
	IntfInfo            *IntfDetails         `protobuf:"bytes,2,opt,name=intfInfo,proto3" json:"intfInfo,omitempty"`
	MacAddr             string               `protobuf:"bytes,3,opt,name=mac_addr,json=macAddr,proto3" json:"mac_addr,omitempty"`
	IpamAllocatedbyHost *IPAMallocatedbyHost `protobuf:"bytes,4,opt,name=ipamAllocatedbyHost,proto3" json:"ipamAllocatedbyHost,omitempty"`
	IpInfo              *IpDetails           `protobuf:"bytes,5,opt,name=ipInfo,proto3" json:"ipInfo,omitempty"`
	OffloadFlags        *OffloadFlags        `protobuf:"bytes,6,opt,name=offloadFlags,proto3" json:"offloadFlags,omitempty"`
	Vlan                string               `protobuf:"bytes,7,opt,name=vlan,proto3" json:"vlan,omitempty"`
}

func (x *CNIAddRequest) Reset() {
	*x = CNIAddRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cniOffloadAgent_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CNIAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNIAddRequest) ProtoMessage() {}

func (x *CNIAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cniOffloadAgent_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNIAddRequest.ProtoReflect.Descriptor instead.
func (*CNIAddRequest) Descriptor() ([]byte, []int) {
	return file_cniOffloadAgent_proto_rawDescGZIP(), []int{0}
}

func (x *CNIAddRequest) GetPodInfo() *PodDetails {
	if x != nil {
		return x.PodInfo
	}
	return nil
}

func (x *CNIAddRequest) GetIntfInfo() *IntfDetails {
	if x != nil {
		return x.IntfInfo
	}
	return nil
}

func (x *CNIAddRequest) GetMacAddr() string {
	if x != nil {
		return x.MacAddr
	}
	return ""
}

func (x *CNIAddRequest) GetIpamAllocatedbyHost() *IPAMallocatedbyHost {
	if x != nil {
		return x.IpamAllocatedbyHost
	}
	return nil
}

func (x *CNIAddRequest) GetIpInfo() *IpDetails {
	if x != nil {
		return x.IpInfo
	}
	return nil
}

func (x *CNIAddRequest) GetOffloadFlags() *OffloadFlags {
	if x != nil {
		return x.OffloadFlags
	}
	return nil
}

func (x *CNIAddRequest) GetVlan() string {
	if x != nil {
		return x.Vlan
	}
	return ""
}

// CNIAddResponse Response Message for Add
type CNIAddResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpInfo *IpDetails `protobuf:"bytes,1,opt,name=ipInfo,proto3" json:"ipInfo,omitempty"`
	Vlan   string     `protobuf:"bytes,2,opt,name=vlan,proto3" json:"vlan,omitempty"`
	Status string     `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CNIAddResponse) Reset() {
	*x = CNIAddResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cniOffloadAgent_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CNIAddResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNIAddResponse) ProtoMessage() {}

func (x *CNIAddResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cniOffloadAgent_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNIAddResponse.ProtoReflect.Descriptor instead.
func (*CNIAddResponse) Descriptor() ([]byte, []int) {
	return file_cniOffloadAgent_proto_rawDescGZIP(), []int{1}
}

func (x *CNIAddResponse) GetIpInfo() *IpDetails {
	if x != nil {
		return x.IpInfo
	}
	return nil
}

func (x *CNIAddResponse) GetVlan() string {
	if x != nil {
		return x.Vlan
	}
	return ""
}

func (x *CNIAddResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// CNIDelRequest Fields are added based on what is needed to cover the scenarios
// defined for CniAddRequest message
type CNIDelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntfInfo *IntfDetails `protobuf:"bytes,1,opt,name=intfInfo,proto3" json:"intfInfo,omitempty"`
	PodInfo  *PodDetails  `protobuf:"bytes,2,opt,name=podInfo,proto3" json:"podInfo,omitempty"`
}

func (x *CNIDelRequest) Reset() {
	*x = CNIDelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cniOffloadAgent_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CNIDelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNIDelRequest) ProtoMessage() {}

func (x *CNIDelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cniOffloadAgent_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNIDelRequest.ProtoReflect.Descriptor instead.
func (*CNIDelRequest) Descriptor() ([]byte, []int) {
	return file_cniOffloadAgent_proto_rawDescGZIP(), []int{2}
}

func (x *CNIDelRequest) GetIntfInfo() *IntfDetails {
	if x != nil {
		return x.IntfInfo
	}
	return nil
}

func (x *CNIDelRequest) GetPodInfo() *PodDetails {
	if x != nil {
		return x.PodInfo
	}
	return nil
}

// CNIDelResponse Response message for Del
type CNIDelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpInfo *IpDetails `protobuf:"bytes,1,opt,name=ipInfo,proto3" json:"ipInfo,omitempty"`
	Status string     `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CNIDelResponse) Reset() {
	*x = CNIDelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cniOffloadAgent_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CNIDelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNIDelResponse) ProtoMessage() {}

func (x *CNIDelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cniOffloadAgent_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNIDelResponse.ProtoReflect.Descriptor instead.
func (*CNIDelResponse) Descriptor() ([]byte, []int) {
	return file_cniOffloadAgent_proto_rawDescGZIP(), []int{3}
}

func (x *CNIDelResponse) GetIpInfo() *IpDetails {
	if x != nil {
		return x.IpInfo
	}
	return nil
}

func (x *CNIDelResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// CNICheckResponse Response message for Check
type CNICheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpInfo *IpDetails `protobuf:"bytes,1,opt,name=ipInfo,proto3" json:"ipInfo,omitempty"`
	Status string     `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CNICheckResponse) Reset() {
	*x = CNICheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cniOffloadAgent_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CNICheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNICheckResponse) ProtoMessage() {}

func (x *CNICheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cniOffloadAgent_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNICheckResponse.ProtoReflect.Descriptor instead.
func (*CNICheckResponse) Descriptor() ([]byte, []int) {
	return file_cniOffloadAgent_proto_rawDescGZIP(), []int{4}
}

func (x *CNICheckResponse) GetIpInfo() *IpDetails {
	if x != nil {
		return x.IpInfo
	}
	return nil
}

func (x *CNICheckResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// CNICheckRequest Fields are added based on what is needed to cover the scenarios
// defined for CniAddRequest message
type CNICheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntfInfo *IntfDetails `protobuf:"bytes,1,opt,name=intfInfo,proto3" json:"intfInfo,omitempty"`
	PodInfo  *PodDetails  `protobuf:"bytes,2,opt,name=podInfo,proto3" json:"podInfo,omitempty"`
	IpInfo   *IpDetails   `protobuf:"bytes,3,opt,name=ipInfo,proto3" json:"ipInfo,omitempty"`
}

func (x *CNICheckRequest) Reset() {
	*x = CNICheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cniOffloadAgent_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CNICheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNICheckRequest) ProtoMessage() {}

func (x *CNICheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cniOffloadAgent_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNICheckRequest.ProtoReflect.Descriptor instead.
func (*CNICheckRequest) Descriptor() ([]byte, []int) {
	return file_cniOffloadAgent_proto_rawDescGZIP(), []int{5}
}

func (x *CNICheckRequest) GetIntfInfo() *IntfDetails {
	if x != nil {
		return x.IntfInfo
	}
	return nil
}

func (x *CNICheckRequest) GetPodInfo() *PodDetails {
	if x != nil {
		return x.PodInfo
	}
	return nil
}

func (x *CNICheckRequest) GetIpInfo() *IpDetails {
	if x != nil {
		return x.IpInfo
	}
	return nil
}

var File_cniOffloadAgent_proto protoreflect.FileDescriptor

var file_cniOffloadAgent_proto_rawDesc = []byte{
	0x0a, 0x15, 0x63, 0x6e, 0x69, 0x4f, 0x66, 0x66, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x63, 0x6e, 0x69, 0x4f, 0x66, 0x66, 0x6c,
	0x6f, 0x61, 0x64, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xae, 0x02, 0x0a, 0x0d, 0x43, 0x4e, 0x49, 0x41, 0x64, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x07, 0x70, 0x6f, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x50, 0x6f, 0x64, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x70, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a,
	0x08, 0x69, 0x6e, 0x74, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x49, 0x6e, 0x74, 0x66, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x08, 0x69,
	0x6e, 0x74, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x63, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x63, 0x41, 0x64,
	0x64, 0x72, 0x12, 0x46, 0x0a, 0x13, 0x69, 0x70, 0x61, 0x6d, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x62, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x49, 0x50, 0x41, 0x4d, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x62,
	0x79, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x13, 0x69, 0x70, 0x61, 0x6d, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x62, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x06, 0x69, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x70, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x06, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31,
	0x0a, 0x0c, 0x6f, 0x66, 0x66, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x52, 0x0c, 0x6f, 0x66, 0x66, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x76, 0x6c, 0x61, 0x6e, 0x22, 0x60, 0x0a, 0x0e, 0x43, 0x4e, 0x49, 0x41, 0x64, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x69, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x70, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x06, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x76,
	0x6c, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x60, 0x0a, 0x0d, 0x43, 0x4e, 0x49, 0x44, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x66,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x49, 0x6e, 0x74,
	0x66, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x66, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x25, 0x0a, 0x07, 0x70, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x50, 0x6f, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x07, 0x70, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4c, 0x0a, 0x0e, 0x43, 0x4e, 0x49,
	0x44, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x69,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x70,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x06, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4e, 0x0a, 0x10, 0x43, 0x4e, 0x49, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x69,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49, 0x70,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x06, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x0f, 0x43, 0x4e, 0x49, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x08, 0x69,
	0x6e, 0x74, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x49, 0x6e, 0x74, 0x66, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x08, 0x69, 0x6e, 0x74,
	0x66, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x07, 0x70, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x50, 0x6f, 0x64, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x07, 0x70, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x06,
	0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x49,
	0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x06, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x32, 0x98, 0x01, 0x0a, 0x09, 0x43, 0x4e, 0x49, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b,
	0x0a, 0x06, 0x63, 0x6d, 0x64, 0x41, 0x64, 0x64, 0x12, 0x0e, 0x2e, 0x43, 0x4e, 0x49, 0x41, 0x64,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x43, 0x4e, 0x49, 0x41, 0x64,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2b, 0x0a, 0x06, 0x63,
	0x6d, 0x64, 0x44, 0x65, 0x6c, 0x12, 0x0e, 0x2e, 0x43, 0x4e, 0x49, 0x44, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x43, 0x4e, 0x49, 0x44, 0x65, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x08, 0x63, 0x6d, 0x64, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x12, 0x10, 0x2e, 0x43, 0x4e, 0x49, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x43, 0x4e, 0x49, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0f, 0x5a, 0x0d, 0x70,
	0x62, 0x2f, 0x63, 0x6e, 0x69, 0x4f, 0x66, 0x66, 0x6c, 0x6f, 0x61, 0x64, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cniOffloadAgent_proto_rawDescOnce sync.Once
	file_cniOffloadAgent_proto_rawDescData = file_cniOffloadAgent_proto_rawDesc
)

func file_cniOffloadAgent_proto_rawDescGZIP() []byte {
	file_cniOffloadAgent_proto_rawDescOnce.Do(func() {
		file_cniOffloadAgent_proto_rawDescData = protoimpl.X.CompressGZIP(file_cniOffloadAgent_proto_rawDescData)
	})
	return file_cniOffloadAgent_proto_rawDescData
}

var file_cniOffloadAgent_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_cniOffloadAgent_proto_goTypes = []interface{}{
	(*CNIAddRequest)(nil),       // 0: CNIAddRequest
	(*CNIAddResponse)(nil),      // 1: CNIAddResponse
	(*CNIDelRequest)(nil),       // 2: CNIDelRequest
	(*CNIDelResponse)(nil),      // 3: CNIDelResponse
	(*CNICheckResponse)(nil),    // 4: CNICheckResponse
	(*CNICheckRequest)(nil),     // 5: CNICheckRequest
	(*PodDetails)(nil),          // 6: PodDetails
	(*IntfDetails)(nil),         // 7: IntfDetails
	(*IPAMallocatedbyHost)(nil), // 8: IPAMallocatedbyHost
	(*IpDetails)(nil),           // 9: IpDetails
	(*OffloadFlags)(nil),        // 10: OffloadFlags
}
var file_cniOffloadAgent_proto_depIdxs = []int32{
	6,  // 0: CNIAddRequest.podInfo:type_name -> PodDetails
	7,  // 1: CNIAddRequest.intfInfo:type_name -> IntfDetails
	8,  // 2: CNIAddRequest.ipamAllocatedbyHost:type_name -> IPAMallocatedbyHost
	9,  // 3: CNIAddRequest.ipInfo:type_name -> IpDetails
	10, // 4: CNIAddRequest.offloadFlags:type_name -> OffloadFlags
	9,  // 5: CNIAddResponse.ipInfo:type_name -> IpDetails
	7,  // 6: CNIDelRequest.intfInfo:type_name -> IntfDetails
	6,  // 7: CNIDelRequest.podInfo:type_name -> PodDetails
	9,  // 8: CNIDelResponse.ipInfo:type_name -> IpDetails
	9,  // 9: CNICheckResponse.ipInfo:type_name -> IpDetails
	7,  // 10: CNICheckRequest.intfInfo:type_name -> IntfDetails
	6,  // 11: CNICheckRequest.podInfo:type_name -> PodDetails
	9,  // 12: CNICheckRequest.ipInfo:type_name -> IpDetails
	0,  // 13: CNIAction.cmdAdd:input_type -> CNIAddRequest
	2,  // 14: CNIAction.cmdDel:input_type -> CNIDelRequest
	5,  // 15: CNIAction.cmdCheck:input_type -> CNICheckRequest
	1,  // 16: CNIAction.cmdAdd:output_type -> CNIAddResponse
	3,  // 17: CNIAction.cmdDel:output_type -> CNIDelResponse
	4,  // 18: CNIAction.cmdCheck:output_type -> CNICheckResponse
	16, // [16:19] is the sub-list for method output_type
	13, // [13:16] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_cniOffloadAgent_proto_init() }
func file_cniOffloadAgent_proto_init() {
	if File_cniOffloadAgent_proto != nil {
		return
	}
	file_cniOffloadDefinitions_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_cniOffloadAgent_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CNIAddRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cniOffloadAgent_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CNIAddResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cniOffloadAgent_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CNIDelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cniOffloadAgent_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CNIDelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cniOffloadAgent_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CNICheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cniOffloadAgent_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CNICheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cniOffloadAgent_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cniOffloadAgent_proto_goTypes,
		DependencyIndexes: file_cniOffloadAgent_proto_depIdxs,
		MessageInfos:      file_cniOffloadAgent_proto_msgTypes,
	}.Build()
	File_cniOffloadAgent_proto = out.File
	file_cniOffloadAgent_proto_rawDesc = nil
	file_cniOffloadAgent_proto_goTypes = nil
	file_cniOffloadAgent_proto_depIdxs = nil
}
