// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package cniOffload

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CNIActionClient is the client API for CNIAction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CNIActionClient interface {
	CmdAdd(ctx context.Context, in *CNIAddRequest, opts ...grpc.CallOption) (*CNIAddResponse, error)
	CmdDel(ctx context.Context, in *CNIDelRequest, opts ...grpc.CallOption) (*CNIDelResponse, error)
	CmdCheck(ctx context.Context, in *CNICheckRequest, opts ...grpc.CallOption) (*CNICheckResponse, error)
}

type cNIActionClient struct {
	cc grpc.ClientConnInterface
}

func NewCNIActionClient(cc grpc.ClientConnInterface) CNIActionClient {
	return &cNIActionClient{cc}
}

func (c *cNIActionClient) CmdAdd(ctx context.Context, in *CNIAddRequest, opts ...grpc.CallOption) (*CNIAddResponse, error) {
	out := new(CNIAddResponse)
	err := c.cc.Invoke(ctx, "/CNIAction/cmdAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cNIActionClient) CmdDel(ctx context.Context, in *CNIDelRequest, opts ...grpc.CallOption) (*CNIDelResponse, error) {
	out := new(CNIDelResponse)
	err := c.cc.Invoke(ctx, "/CNIAction/cmdDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cNIActionClient) CmdCheck(ctx context.Context, in *CNICheckRequest, opts ...grpc.CallOption) (*CNICheckResponse, error) {
	out := new(CNICheckResponse)
	err := c.cc.Invoke(ctx, "/CNIAction/cmdCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CNIActionServer is the server API for CNIAction service.
// All implementations must embed UnimplementedCNIActionServer
// for forward compatibility
type CNIActionServer interface {
	CmdAdd(context.Context, *CNIAddRequest) (*CNIAddResponse, error)
	CmdDel(context.Context, *CNIDelRequest) (*CNIDelResponse, error)
	CmdCheck(context.Context, *CNICheckRequest) (*CNICheckResponse, error)
	mustEmbedUnimplementedCNIActionServer()
}

// UnimplementedCNIActionServer must be embedded to have forward compatible implementations.
type UnimplementedCNIActionServer struct {
}

func (UnimplementedCNIActionServer) CmdAdd(context.Context, *CNIAddRequest) (*CNIAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CmdAdd not implemented")
}
func (UnimplementedCNIActionServer) CmdDel(context.Context, *CNIDelRequest) (*CNIDelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CmdDel not implemented")
}
func (UnimplementedCNIActionServer) CmdCheck(context.Context, *CNICheckRequest) (*CNICheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CmdCheck not implemented")
}
func (UnimplementedCNIActionServer) mustEmbedUnimplementedCNIActionServer() {}

// UnsafeCNIActionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CNIActionServer will
// result in compilation errors.
type UnsafeCNIActionServer interface {
	mustEmbedUnimplementedCNIActionServer()
}

func RegisterCNIActionServer(s grpc.ServiceRegistrar, srv CNIActionServer) {
	s.RegisterService(&CNIAction_ServiceDesc, srv)
}

func _CNIAction_CmdAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CNIAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNIActionServer).CmdAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CNIAction/cmdAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNIActionServer).CmdAdd(ctx, req.(*CNIAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CNIAction_CmdDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CNIDelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNIActionServer).CmdDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CNIAction/cmdDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNIActionServer).CmdDel(ctx, req.(*CNIDelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CNIAction_CmdCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CNICheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNIActionServer).CmdCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CNIAction/cmdCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNIActionServer).CmdCheck(ctx, req.(*CNICheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CNIAction_ServiceDesc is the grpc.ServiceDesc for CNIAction service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CNIAction_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CNIAction",
	HandlerType: (*CNIActionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "cmdAdd",
			Handler:    _CNIAction_CmdAdd_Handler,
		},
		{
			MethodName: "cmdDel",
			Handler:    _CNIAction_CmdDel_Handler,
		},
		{
			MethodName: "cmdCheck",
			Handler:    _CNIAction_CmdCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cniOffloadAgent.proto",
}
