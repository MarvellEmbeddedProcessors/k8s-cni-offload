From ae555858fd5aed04ac734001beeb2c6ab42fc038 Mon Sep 17 00:00:00 2001
From: Balakrishna Bhamidipati <bbhamidipati@marvell.com>
Date: Fri, 11 Apr 2025 16:45:46 +0530
Subject: [PATCH] cilium: cni-offload patch

Signed-off-by: Balakrishna Bhamidipati <bbhamidipati@marvell.com>

diff --git a/bpf/lib/common.h b/bpf/lib/common.h
index 2adf9e284e..38a7793b8a 100644
--- a/bpf/lib/common.h
+++ b/bpf/lib/common.h
@@ -1242,7 +1242,21 @@ static __always_inline int redirect_ep(struct __ctx_buff *ctx __maybe_unused,
 	if (from_tunnel)
 		ctx_change_type(ctx, PACKET_HOST);
 
+	/* ctx_redirect_peer(): redirection happens to the ifindex' peer device
+	 * and the netns switch takes place from ingress to ingress without
+	 * going through the CPU's backlog queue.
+	 *
+	 * In offload case, as there is no access to peer device, should use
+	 * ctx_redirect() which will enqueue packet to egress side.
+	 *
+	 * TODO: Check if the interface is veth to use ctx_redirect_peer()
+	 */
+
+#if defined (MARVELL_DPU_OFFLOAD) && defined(__aarch64__)
+	return ctx_redirect(ctx, ifindex, 0);
+#else
 	return ctx_redirect_peer(ctx, ifindex, 0);
+#endif
 }
 
 static __always_inline __u64 ctx_adjust_hroom_flags(void)
diff --git a/daemon/k8s/resources.go b/daemon/k8s/resources.go
index dc9f507279..3e080320e4 100644
--- a/daemon/k8s/resources.go
+++ b/daemon/k8s/resources.go
@@ -5,6 +5,7 @@ package k8s
 
 import (
 	"fmt"
+	"strings"
 
 	"github.com/cilium/hive/cell"
 	v1 "k8s.io/api/core/v1"
@@ -82,6 +83,17 @@ var (
 					},
 				)
 			},
+			func(lc cell.Lifecycle, cs client.Clientset) (RemotePodResource, error) {
+                                dpuName := nodeTypes.GetName()
+                                strN := strings.Split(dpuName, "-dpu")
+                                hostName := strN[0]
+				return k8s.PodResource(
+					lc, cs,
+					func(opts *metav1.ListOptions) {
+                                                opts.FieldSelector = fields.ParseSelectorOrDie("spec.nodeName=" + hostName).String()
+					},
+				)
+			},
 		),
 	)
 
@@ -142,6 +154,8 @@ type LocalCiliumNodeResource resource.Resource[*cilium_api_v2.CiliumNode]
 // objects scheduled on the node we are currently running on.
 type LocalPodResource resource.Resource[*slim_corev1.Pod]
 
+type RemotePodResource resource.Resource[*slim_corev1.Pod]
+
 // ServiceNonHeadless is a resource.Resource[*slim_corev1.Service] but one which will only stream updates for
 // non headless Services.
 type ServiceNonHeadless resource.Resource[*slim_corev1.Service]
@@ -159,6 +173,7 @@ type Resources struct {
 	LocalNode                        LocalNodeResource
 	LocalCiliumNode                  LocalCiliumNodeResource
 	LocalPods                        LocalPodResource
+	RemotePods                       RemotePodResource
 	Namespaces                       resource.Resource[*slim_corev1.Namespace]
 	NetworkPolicies                  resource.Resource[*slim_networkingv1.NetworkPolicy]
 	CiliumNetworkPolicies            resource.Resource[*cilium_api_v2.CiliumNetworkPolicy]
diff --git a/go.mod b/go.mod
index c906ac1e74..b3c2210de0 100644
--- a/go.mod
+++ b/go.mod
@@ -17,6 +17,7 @@ require (
 	github.com/aws/smithy-go v1.22.0
 	github.com/blang/semver/v4 v4.0.0
 	github.com/cilium/charts v0.0.0-20241006222739-d4ea3601d819
+	github.com/cilium/checkmate v1.0.3
 	github.com/cilium/coverbee v0.3.3-0.20240723084546-664438750fce
 	github.com/cilium/deepequal-gen v0.0.0-20231116094812-0d6c075c335f
 	github.com/cilium/dns v1.1.51-0.20240603182237-af788769786a
@@ -32,6 +33,7 @@ require (
 	github.com/cilium/workerpool v1.2.0
 	github.com/cloudflare/cfssl v1.6.5
 	github.com/containernetworking/cni v1.2.3
+	github.com/containernetworking/plugins v1.2.0
 	github.com/coreos/go-systemd/v22 v22.5.0
 	github.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc
 	github.com/docker/docker v27.3.1+incompatible
@@ -59,6 +61,7 @@ require (
 	github.com/gorilla/mux v1.8.1
 	github.com/grpc-ecosystem/go-grpc-middleware/v2 v2.1.0
 	github.com/grpc-ecosystem/go-grpc-prometheus v1.2.0
+	github.com/hashicorp/consul/api v1.28.2
 	github.com/hashicorp/go-hclog v1.6.3
 	github.com/hashicorp/go-immutable-radix/v2 v2.1.0
 	github.com/hashicorp/golang-lru/v2 v2.0.7
@@ -71,6 +74,7 @@ require (
 	github.com/mattn/go-shellwords v1.0.12
 	github.com/mdlayher/arp v0.0.0-20220221190821-c37aaafac7f9
 	github.com/mdlayher/ethernet v0.0.0-20220221185849-529eae5b6118
+	github.com/mitchellh/mapstructure v1.5.0
 	github.com/onsi/ginkgo v1.16.5
 	github.com/onsi/gomega v1.34.1
 	github.com/osrg/gobgp/v3 v3.29.0
@@ -101,11 +105,13 @@ require (
 	go.etcd.io/etcd/client/v3 v3.5.16
 	go.opentelemetry.io/otel v1.31.0
 	go.opentelemetry.io/otel/trace v1.31.0
+	go.uber.org/dig v1.17.1
 	go.uber.org/goleak v1.3.0
 	go.uber.org/zap v1.27.0
 	go.universe.tf/metallb v0.11.0
 	go4.org/netipx v0.0.0-20231129151722-fdeea329fbba
 	golang.org/x/crypto v0.28.0
+	golang.org/x/exp v0.0.0-20240808152545-0cdaa3abc0fa
 	golang.org/x/mod v0.21.0
 	golang.org/x/net v0.30.0
 	golang.org/x/sync v0.8.0
@@ -157,6 +163,7 @@ require (
 	github.com/Microsoft/hcsshim v0.11.4 // indirect
 	github.com/alecthomas/participle/v2 v2.1.0 // indirect
 	github.com/antlr4-go/antlr/v4 v4.13.0 // indirect
+	github.com/armon/go-metrics v0.4.1 // indirect
 	github.com/asaskevich/govalidator v0.0.0-20230301143203-a9d515a09cc2 // indirect
 	github.com/aws/aws-sdk-go-v2/credentials v1.17.41 // indirect
 	github.com/aws/aws-sdk-go-v2/internal/configsources v1.3.21 // indirect
@@ -220,8 +227,13 @@ require (
 	github.com/gosuri/uitable v0.0.4 // indirect
 	github.com/gregjones/httpcache v0.0.0-20180305231024-9cad4c3443a7 // indirect
 	github.com/hashicorp/errwrap v1.1.0 // indirect
+	github.com/hashicorp/go-cleanhttp v0.5.2 // indirect
+	github.com/hashicorp/go-immutable-radix v1.3.1 // indirect
 	github.com/hashicorp/go-multierror v1.1.1 // indirect
+	github.com/hashicorp/go-rootcerts v1.0.2 // indirect
+	github.com/hashicorp/golang-lru v0.5.4 // indirect
 	github.com/hashicorp/hcl v1.0.1-vault-5 // indirect
+	github.com/hashicorp/serf v0.10.1 // indirect
 	github.com/huandu/xstrings v1.5.0 // indirect
 	github.com/imdario/mergo v0.3.16 // indirect
 	github.com/inconshreveable/mousetrap v1.1.0 // indirect
@@ -232,6 +244,8 @@ require (
 	github.com/josharian/native v1.1.0 // indirect
 	github.com/k-sone/critbitgo v1.4.0 // indirect
 	github.com/klauspost/compress v1.17.9 // indirect
+	github.com/kr/pretty v0.3.1 // indirect
+	github.com/kr/text v0.2.0 // indirect
 	github.com/kylelemons/godebug v1.1.0 // indirect
 	github.com/lann/builder v0.0.0-20180802200727-47ae307949d0 // indirect
 	github.com/lann/ps v0.0.0-20150810152359-62de8c46ede0 // indirect
@@ -251,7 +265,6 @@ require (
 	github.com/mitchellh/copystructure v1.2.0 // indirect
 	github.com/mitchellh/go-homedir v1.1.0 // indirect
 	github.com/mitchellh/go-wordwrap v1.0.1 // indirect
-	github.com/mitchellh/mapstructure v1.5.0 // indirect
 	github.com/mitchellh/reflectwalk v1.0.2 // indirect
 	github.com/moby/docker-image-spec v1.3.1 // indirect
 	github.com/moby/locker v1.0.1 // indirect
@@ -275,6 +288,7 @@ require (
 	github.com/petermattis/goid v0.0.0-20240813172612-4fcff4a6cae7 // indirect
 	github.com/pkg/errors v0.9.1 // indirect
 	github.com/rivo/uniseg v0.4.4 // indirect
+	github.com/rogpeppe/go-internal v1.12.0 // indirect
 	github.com/rubenv/sql-migrate v1.7.0 // indirect
 	github.com/sagikazarmark/locafero v0.4.0 // indirect
 	github.com/sagikazarmark/slog-shim v0.1.0 // indirect
@@ -303,9 +317,7 @@ require (
 	go.opentelemetry.io/proto/otlp v1.3.1 // indirect
 	go.starlark.net v0.0.0-20230525235612-a134d8f9ddca // indirect
 	go.uber.org/atomic v1.11.0 // indirect
-	go.uber.org/dig v1.17.1 // indirect
 	go.uber.org/multierr v1.11.0 // indirect
-	golang.org/x/exp v0.0.0-20240808152545-0cdaa3abc0fa // indirect
 	golang.org/x/oauth2 v0.23.0 // indirect
 	golang.org/x/text v0.19.0 // indirect
 	golang.zx2c4.com/wireguard v0.0.0-20231211153847-12269c276173 // indirect
diff --git a/go.sum b/go.sum
index 7d0d8e9e56..05d0061d7a 100644
--- a/go.sum
+++ b/go.sum
@@ -45,6 +45,7 @@ github.com/BurntSushi/toml v1.3.2/go.mod h1:CxXYINrC8qIiEnFrOxCa7Jy5BFHlXnUU2pbi
 github.com/BurntSushi/xgb v0.0.0-20160522181843-27f122750802/go.mod h1:IVnqGOEym/WlBOVXweHU+Q+/VP0lqqI8lqeDx9IjBqo=
 github.com/DATA-DOG/go-sqlmock v1.5.2 h1:OcvFkGmslmlZibjAjaHm3L//6LiuBgolP7OputlJIzU=
 github.com/DATA-DOG/go-sqlmock v1.5.2/go.mod h1:88MAG/4G7SMwSE3CeA0ZKzrT5CiOU3OJ+JlNzwDqpNU=
+github.com/DataDog/datadog-go v3.2.0+incompatible/go.mod h1:LButxg5PwREeZtORoXG3tL4fMGNddJ+vMq1mwgfaqoQ=
 github.com/HdrHistogram/hdrhistogram-go v1.1.2/go.mod h1:yDgFjdqOqDEKOvasDdhWNXYg9BVp4O+o5f6V/ehm6Oo=
 github.com/MakeNowJust/heredoc v1.0.0 h1:cXCdzVdstXyiTqTvfqk9SDHpKNjxuom+DOlyEeQ4pzQ=
 github.com/MakeNowJust/heredoc v1.0.0/go.mod h1:mG5amYoWBHf8vpLOuehzbGGw0EHxpZZ6lCpQ4fNJ8LE=
@@ -70,7 +71,9 @@ github.com/alecthomas/participle/v2 v2.1.0/go.mod h1:Y1+hAs8DHPmc3YUFzqllV+eSQ9l
 github.com/alecthomas/repr v0.2.0 h1:HAzS41CIzNW5syS8Mf9UwXhNH1J9aix/BvDRf1Ml2Yk=
 github.com/alecthomas/repr v0.2.0/go.mod h1:Fr0507jx4eOXV7AlPV6AVZLYrLIuIeSOWtW57eE/O/4=
 github.com/alecthomas/template v0.0.0-20160405071501-a0175ee3bccc/go.mod h1:LOuyumcjzFXgccqObfd/Ljyb9UuFJ6TxHnclSeseNhc=
+github.com/alecthomas/template v0.0.0-20190718012654-fb15b899a751/go.mod h1:LOuyumcjzFXgccqObfd/Ljyb9UuFJ6TxHnclSeseNhc=
 github.com/alecthomas/units v0.0.0-20151022065526-2efee857e7cf/go.mod h1:ybxpYRFXyAe+OPACYpWeL0wqObRcbAqCMya13uyzqw0=
+github.com/alecthomas/units v0.0.0-20190717042225-c3de453c63f4/go.mod h1:ybxpYRFXyAe+OPACYpWeL0wqObRcbAqCMya13uyzqw0=
 github.com/alessio/shellescape v1.4.1 h1:V7yhSDDn8LP4lc4jS8pFkt0zCnzVJlG5JXy9BVKJUX0=
 github.com/alessio/shellescape v1.4.1/go.mod h1:PZAiSCk0LJaZkiCSkPv8qIobYglO3FPpyFjDCtHLS30=
 github.com/aliyun/alibaba-cloud-sdk-go v1.63.23 h1:qVHm1EZhZ4JGfB9RMHREtbcNcPDDFyCKA+0/nMk6JP8=
@@ -80,6 +83,11 @@ github.com/andreyvit/diff v0.0.0-20170406064948-c7f18ee00883/go.mod h1:rCTlJbsFo
 github.com/antihax/optional v1.0.0/go.mod h1:uupD/76wgC+ih3iEmQUL+0Ugr19nfwCT1kdvxnR2qWY=
 github.com/antlr4-go/antlr/v4 v4.13.0 h1:lxCg3LAv+EUK6t1i0y1V6/SLeUi0eKEKdhQAlS8TVTI=
 github.com/antlr4-go/antlr/v4 v4.13.0/go.mod h1:pfChB/xh/Unjila75QW7+VU4TSnWnnk9UTnmpPaOR2g=
+github.com/armon/circbuf v0.0.0-20150827004946-bbbad097214e/go.mod h1:3U/XgcO3hCbHZ8TKRvWD2dDTCfh9M9ya+I9JpbB7O8o=
+github.com/armon/go-metrics v0.0.0-20180917152333-f0300d1749da/go.mod h1:Q73ZrmVTwzkszR9V5SSuryQ31EELlFMUz1kKyl939pY=
+github.com/armon/go-metrics v0.4.1 h1:hR91U9KYmb6bLBYLQjyM+3j+rcd/UhE+G78SFnF8gJA=
+github.com/armon/go-metrics v0.4.1/go.mod h1:E6amYzXo6aW1tqzoZGT755KkbgrJsSdpwZ+3JqfkOG4=
+github.com/armon/go-radix v0.0.0-20180808171621-7fddfc383310/go.mod h1:ufUuZ+zHj4x4TnLV4JWEpy2hxWSpsRywHrMgIH9cCH8=
 github.com/armon/go-radix v1.0.0 h1:F4z6KzEeeQIMeLFa97iZU6vupzoecKdU5TX24SNppXI=
 github.com/armon/go-radix v1.0.0/go.mod h1:ufUuZ+zHj4x4TnLV4JWEpy2hxWSpsRywHrMgIH9cCH8=
 github.com/armon/go-socks5 v0.0.0-20160902184237-e75332964ef5 h1:0CwZNZbxp69SHPdPJAN/hZIm0C4OItdklCFmMRWYpio=
@@ -118,6 +126,7 @@ github.com/beorn7/perks v0.0.0-20180321164747-3a771d992973/go.mod h1:Dwedo/Wpr24
 github.com/beorn7/perks v1.0.0/go.mod h1:KWe93zE9D1o94FZ5RNwFwVgaQK1VOXiVxmqh+CedLV8=
 github.com/beorn7/perks v1.0.1 h1:VlbKKnNfV8bJzeqoa4cOKqO6bYr3WgKZxO8Z16+hsOM=
 github.com/beorn7/perks v1.0.1/go.mod h1:G2ZrVWU2WbWT9wwq4/hrbKbnv/1ERSJQ0ibhJ6rlkpw=
+github.com/bgentry/speakeasy v0.1.0/go.mod h1:+zsyZBPWlz7T6j88CTgSN5bM796AkVf0kBD4zp0CCIs=
 github.com/blang/semver/v4 v4.0.0 h1:1PFHFE6yCCTv8C1TeyNNarDzntLi7wMI5i/pzqYIsAM=
 github.com/blang/semver/v4 v4.0.0/go.mod h1:IbckMUScFkM3pff0VJDNKRiT6TG/YpiHIM2yvyW5YoQ=
 github.com/bshuster-repo/logrus-logstash-hook v1.0.0 h1:e+C0SB5R1pu//O4MQ3f9cFuPGoOVeF2fE4Og9otCc70=
@@ -143,6 +152,8 @@ github.com/chzyer/readline v0.0.0-20180603132655-2972be24d48e/go.mod h1:nSuG5e5P
 github.com/chzyer/test v0.0.0-20180213035817-a1ea475d72b1/go.mod h1:Q3SI9o4m/ZMnBNeIyt5eFwwo7qiLfzFZmjNmxjkiQlU=
 github.com/cilium/charts v0.0.0-20241006222739-d4ea3601d819 h1:09SJEGEP33kpYYjgvwu4383j60HH7b+/JVpqSl/5oc8=
 github.com/cilium/charts v0.0.0-20241006222739-d4ea3601d819/go.mod h1:M3C9VOlFvRzuV+a01t07Tw4uFLSfkCH3L542IWjf6BU=
+github.com/cilium/checkmate v1.0.3 h1:CQC5eOmlAZeEjPrVZY3ZwEBH64lHlx9mXYdUehEwI5w=
+github.com/cilium/checkmate v1.0.3/go.mod h1:KiBTasf39/F2hf2yAmHw21YFl3hcEyP4Yk6filxc12A=
 github.com/cilium/controller-tools v0.16.1-1 h1:ICJKl0ci+ZG41BZwL1axxh5Ji7hielbEOTD/arMOAck=
 github.com/cilium/controller-tools v0.16.1-1/go.mod h1:0I0xqjR65YTfoO12iR+mZR6s6UAVcUARgXRlsu0ljB0=
 github.com/cilium/coverbee v0.3.3-0.20240723084546-664438750fce h1:gqzXY3NuHllVVDw9vD49mlXx+9bYFPlg23rdrkQNFDM=
@@ -175,6 +186,8 @@ github.com/cilium/stream v0.0.0-20240816054136-71321e385273 h1:lyP0p5AW9fnNWmUcQ
 github.com/cilium/stream v0.0.0-20240816054136-71321e385273/go.mod h1:/e83AwqvNKpyg4n3C41qmnmj1x2G9DwzI+jb7GkF4lI=
 github.com/cilium/workerpool v1.2.0 h1:Wc2iOPTvCgWKQXeq4L5tnx4QFEI+z5q1+bSpSS0cnAY=
 github.com/cilium/workerpool v1.2.0/go.mod h1:GOYJhwlnIjR+jWSDNBb5kw47G1H/XA9X4WOBpgr4pQU=
+github.com/circonus-labs/circonus-gometrics v2.3.1+incompatible/go.mod h1:nmEj6Dob7S7YxXgwXpfOuvO54S+tGdZdw9fuRZt25Ag=
+github.com/circonus-labs/circonusllhist v0.1.3/go.mod h1:kMXHVDlOchFAehlya5ePtbp5jckzBHf4XRpQvBOLI+I=
 github.com/client9/misspell v0.3.4/go.mod h1:qj6jICC3Q7zFZvVWo7KLAzC3yx5G7kyvSDkc90ppPyw=
 github.com/cloudflare/cfssl v1.6.5 h1:46zpNkm6dlNkMZH/wMW22ejih6gIaJbzL2du6vD7ZeI=
 github.com/cloudflare/cfssl v1.6.5/go.mod h1:Bk1si7sq8h2+yVEDrFJiz3d7Aw+pfjjJSZVaD+Taky4=
@@ -196,6 +209,8 @@ github.com/containerd/log v0.1.0 h1:TCJt7ioM2cr/tfR8GPbGf9/VRAX8D2B4PjzCpfX540I=
 github.com/containerd/log v0.1.0/go.mod h1:VRRf09a7mHDIRezVKTRCrOq78v577GXq3bSa3EhrzVo=
 github.com/containernetworking/cni v1.2.3 h1:hhOcjNVUQTnzdRJ6alC5XF+wd9mfGIUaj8FuJbEslXM=
 github.com/containernetworking/cni v1.2.3/go.mod h1:DuLgF+aPd3DzcTQTtp/Nvl1Kim23oFKdm2okJzBQA5M=
+github.com/containernetworking/plugins v1.2.0 h1:SWgg3dQG1yzUo4d9iD8cwSVh1VqI+bP7mkPDoSfP9VU=
+github.com/containernetworking/plugins v1.2.0/go.mod h1:/VjX4uHecW5vVimFa1wkG4s+r/s9qIfPdqlLF4TW8c4=
 github.com/coreos/go-semver v0.3.1 h1:yi21YpKnrx1gt5R+la8n5WgS0kCrsPp33dmEyHReZr4=
 github.com/coreos/go-semver v0.3.1/go.mod h1:irMmmIw/7yzSRPWryHsK7EYSg09caPQL03VsM8rvUec=
 github.com/coreos/go-systemd/v22 v22.5.0 h1:RrqgGjYQKalulkV8NGVIfkXQf6YYmOyiJKk8iXXhfZs=
@@ -259,6 +274,8 @@ github.com/evanphx/json-patch/v5 v5.9.0 h1:kcBlZQbplgElYIlo/n1hJbls2z/1awpXxpRi0
 github.com/evanphx/json-patch/v5 v5.9.0/go.mod h1:VNkHZ/282BpEyt/tObQO8s5CMPmYYq14uClGH4abBuQ=
 github.com/exponent-io/jsonpath v0.0.0-20151013193312-d6023ce2651d h1:105gxyaGwCFad8crR9dcMQWvV9Hvulu6hwUh4tWPJnM=
 github.com/exponent-io/jsonpath v0.0.0-20151013193312-d6023ce2651d/go.mod h1:ZZMPRZwes7CROmyNKgQzC3XPs6L/G2EJLHddWejkmf4=
+github.com/fatih/color v1.7.0/go.mod h1:Zm6kSWBoL9eyXnKyktHP6abPY2pDugNf5KwzbycvMj4=
+github.com/fatih/color v1.9.0/go.mod h1:eQcE1qtQxscV5RaZvpXrrb8Drkc3/DdQ+uUYCNjL+zU=
 github.com/fatih/color v1.13.0/go.mod h1:kLAiJbzzSOZDVNGyDpeOxJ47H46qBXwg5ILebYFFOfk=
 github.com/fatih/color v1.17.0 h1:GlRw1BRJxkpqUCBKzKOw098ed57fEsKeNjpTe3cSjK4=
 github.com/fatih/color v1.17.0/go.mod h1:YZ7TlrGPkiz6ku9fK3TLD/pl3CpsiFyu8N92HLgmosI=
@@ -284,6 +301,7 @@ github.com/go-gorp/gorp/v3 v3.1.0/go.mod h1:dLEjIyyRNiXvNZ8PSmzpt1GsWAUK8kjVhEpj
 github.com/go-jose/go-jose/v4 v4.0.4 h1:VsjPI33J0SB9vQM6PLmNjoHqMQNGPiZ0rHL7Ni7Q6/E=
 github.com/go-jose/go-jose/v4 v4.0.4/go.mod h1:NKb5HO1EZccyMpiZNbdUw/14tiXNyUJh188dfnMCAfc=
 github.com/go-kit/kit v0.8.0/go.mod h1:xBxKIO96dXMWWy0MnWVtmwkA9/13aqxPnvrjFYMA2as=
+github.com/go-kit/kit v0.9.0/go.mod h1:xBxKIO96dXMWWy0MnWVtmwkA9/13aqxPnvrjFYMA2as=
 github.com/go-kit/kit v0.12.0 h1:e4o3o3IsBfAKQh5Qbbiqyfu97Ku7jrO/JbohvztANh4=
 github.com/go-kit/kit v0.12.0/go.mod h1:lHd+EkCZPIwYItmGDDRdhinkzX2A1sj+M9biaEaizzs=
 github.com/go-kit/log v0.2.1 h1:MRVx0/zhvdseW+Gza6N9rVzU/IVzaeE1SFI4raAhmBU=
@@ -370,6 +388,7 @@ github.com/golang/protobuf v1.5.4 h1:i7eJL8qZTpSEXOPTxNKhASYpMn+8e5Q6AdndVa1dWek
 github.com/golang/protobuf v1.5.4/go.mod h1:lnTiLA8Wa4RWRcIUkrtSVa5nRhsEGBg48fD6rSs7xps=
 github.com/gomodule/redigo v1.8.2 h1:H5XSIre1MB5NbPYFp+i1NBbb5qN1W8Y8YAQoAYbkm8k=
 github.com/gomodule/redigo v1.8.2/go.mod h1:P9dn9mFrCBvWhGE1wpxx6fgq7BAeLBk+UUUzlpkBYO0=
+github.com/google/btree v0.0.0-20180813153112-4030bb1f1f0c/go.mod h1:lNA+9X1NB3Zf8V7Ke586lFgjr2dZNuvo3lPJSGZ5JPQ=
 github.com/google/btree v1.1.2 h1:xf4v41cLI2Z6FxbKm+8Bu+m8ifhj15JuZ9sa0jZCMUU=
 github.com/google/btree v1.1.2/go.mod h1:qOPhT0dTNdNzV6Z/lhRX0YXUafgPLFUh+gZMl761Gm4=
 github.com/google/cel-go v0.21.0 h1:cl6uW/gxN+Hy50tNYvI691+sXxioCnstFzLp2WO4GCI=
@@ -441,23 +460,56 @@ github.com/grpc-ecosystem/grpc-gateway v1.16.0 h1:gmcG1KaJ57LophUzW0Hy8NmPhnMZb4
 github.com/grpc-ecosystem/grpc-gateway v1.16.0/go.mod h1:BDjrQk3hbvj6Nolgz8mAMFbcEtjT1g+wF4CSlocrBnw=
 github.com/grpc-ecosystem/grpc-gateway/v2 v2.20.0 h1:bkypFPDjIYGfCYD5mRBvpqxfYX1YCS1PXdKYWi8FsN0=
 github.com/grpc-ecosystem/grpc-gateway/v2 v2.20.0/go.mod h1:P+Lt/0by1T8bfcF3z737NnSbmxQAppXMRziHUxPOC8k=
+github.com/hashicorp/consul/api v1.28.2 h1:mXfkRHrpHN4YY3RqL09nXU1eHKLNiuAN4kHvDQ16k/8=
+github.com/hashicorp/consul/api v1.28.2/go.mod h1:KyzqzgMEya+IZPcD65YFoOVAgPpbfERu4I/tzG6/ueE=
+github.com/hashicorp/consul/sdk v0.16.0 h1:SE9m0W6DEfgIVCJX7xU+iv/hUl4m/nxqMTnCdMxDpJ8=
+github.com/hashicorp/consul/sdk v0.16.0/go.mod h1:7pxqqhqoaPqnBnzXD1StKed62LqJeClzVsUEy85Zr0A=
 github.com/hashicorp/errwrap v1.0.0/go.mod h1:YH+1FKiLXxHSkmPseP+kNlulaMuP3n2brvKWEqk/Jc4=
 github.com/hashicorp/errwrap v1.1.0 h1:OxrOeh75EUXMY8TBjag2fzXGZ40LB6IKw45YeGUDY2I=
 github.com/hashicorp/errwrap v1.1.0/go.mod h1:YH+1FKiLXxHSkmPseP+kNlulaMuP3n2brvKWEqk/Jc4=
+github.com/hashicorp/go-cleanhttp v0.5.0/go.mod h1:JpRdi6/HCYpAwUzNwuwqhbovhLtngrth3wmdIIUrZ80=
+github.com/hashicorp/go-cleanhttp v0.5.2 h1:035FKYIWjmULyFRBKPs8TBQoi0x6d9G4xc9neXJWAZQ=
+github.com/hashicorp/go-cleanhttp v0.5.2/go.mod h1:kO/YDlP8L1346E6Sodw+PrpBSV4/SoxCXGY6BqNFT48=
 github.com/hashicorp/go-hclog v1.6.3 h1:Qr2kF+eVWjTiYmU7Y31tYlP1h0q/X3Nl3tPGdaB11/k=
 github.com/hashicorp/go-hclog v1.6.3/go.mod h1:W4Qnvbt70Wk/zYJryRzDRU/4r0kIg0PVHBcfoyhpF5M=
+github.com/hashicorp/go-immutable-radix v1.0.0/go.mod h1:0y9vanUI8NX6FsYoO3zeMjhV/C5i9g4Q3DwcSNZ4P60=
+github.com/hashicorp/go-immutable-radix v1.3.1 h1:DKHmCUm2hRBK510BaiZlwvpD40f8bJFeZnpfm2KLowc=
+github.com/hashicorp/go-immutable-radix v1.3.1/go.mod h1:0y9vanUI8NX6FsYoO3zeMjhV/C5i9g4Q3DwcSNZ4P60=
 github.com/hashicorp/go-immutable-radix/v2 v2.1.0 h1:CUW5RYIcysz+D3B+l1mDeXrQ7fUvGGCwJfdASSzbrfo=
 github.com/hashicorp/go-immutable-radix/v2 v2.1.0/go.mod h1:hgdqLXA4f6NIjRVisM1TJ9aOJVNRqKZj+xDGF6m7PBw=
+github.com/hashicorp/go-msgpack v0.5.3/go.mod h1:ahLV/dePpqEmjfWmKiqvPkv/twdG7iPBM1vqhUKIvfM=
+github.com/hashicorp/go-msgpack v0.5.5 h1:i9R9JSrqIz0QVLz3sz+i3YJdT7TTSLcfLLzJi9aZTuI=
+github.com/hashicorp/go-msgpack v0.5.5/go.mod h1:ahLV/dePpqEmjfWmKiqvPkv/twdG7iPBM1vqhUKIvfM=
+github.com/hashicorp/go-multierror v1.0.0/go.mod h1:dHtQlpGsu+cZNNAkkCN/P3hoUDHhCYQXV3UM06sGGrk=
+github.com/hashicorp/go-multierror v1.1.0/go.mod h1:spPvp8C1qA32ftKqdAHm4hHTbPw+vmowP0z+KUhOZdA=
 github.com/hashicorp/go-multierror v1.1.1 h1:H5DkEtf6CXdFp0N0Em5UCwQpXMWke8IA0+lD48awMYo=
 github.com/hashicorp/go-multierror v1.1.1/go.mod h1:iw975J/qwKPdAO1clOe2L8331t/9/fmwbPZ6JB6eMoM=
+github.com/hashicorp/go-retryablehttp v0.5.3/go.mod h1:9B5zBasrRhHXnJnui7y6sL7es7NDiJgTc6Er0maI1Xs=
+github.com/hashicorp/go-rootcerts v1.0.2 h1:jzhAVGtqPKbwpyCPELlgNWhE1znq+qwJtW5Oi2viEzc=
+github.com/hashicorp/go-rootcerts v1.0.2/go.mod h1:pqUvnprVnM5bf7AOirdbb01K4ccR319Vf4pU3K5EGc8=
+github.com/hashicorp/go-sockaddr v1.0.0/go.mod h1:7Xibr9yA9JjQq1JpNB2Vw7kxv8xerXegt+ozgdvDeDU=
+github.com/hashicorp/go-sockaddr v1.0.2 h1:ztczhD1jLxIRjVejw8gFomI1BQZOe2WoVOu0SyteCQc=
+github.com/hashicorp/go-sockaddr v1.0.2/go.mod h1:rB4wwRAUzs07qva3c5SdrY/NEtAUjGlgmH/UkBUC97A=
+github.com/hashicorp/go-syslog v1.0.0/go.mod h1:qPfqrKkXGihmCqbJM2mZgkZGvKG1dFdvsLplgctolz4=
+github.com/hashicorp/go-uuid v1.0.0/go.mod h1:6SBZvOh/SIDV7/2o3Jml5SYk/TvGqwFJ/bN7x4byOro=
+github.com/hashicorp/go-uuid v1.0.1/go.mod h1:6SBZvOh/SIDV7/2o3Jml5SYk/TvGqwFJ/bN7x4byOro=
 github.com/hashicorp/go-uuid v1.0.3 h1:2gKiV6YVmrJ1i2CKKa9obLvRieoRGviZFL26PcT/Co8=
 github.com/hashicorp/go-uuid v1.0.3/go.mod h1:6SBZvOh/SIDV7/2o3Jml5SYk/TvGqwFJ/bN7x4byOro=
+github.com/hashicorp/go-version v1.2.1 h1:zEfKbn2+PDgroKdiOzqiE8rsmLqU2uwi5PB5pBJ3TkI=
+github.com/hashicorp/go-version v1.2.1/go.mod h1:fltr4n8CU8Ke44wwGCBoEymUuxUHl09ZGVZPK5anwXA=
+github.com/hashicorp/golang-lru v0.5.0/go.mod h1:/m3WP610KZHVQ1SGc6re/UDhFvYD7pJ4Ao+sR/qLZy8=
 github.com/hashicorp/golang-lru v0.5.4 h1:YDjusn29QI/Das2iO9M0BHnIbxPeyuCHsjMW+lJfyTc=
 github.com/hashicorp/golang-lru v0.5.4/go.mod h1:iADmTwqILo4mZ8BN3D2Q6+9jd8WM5uGBxy+E8yxSoD4=
 github.com/hashicorp/golang-lru/v2 v2.0.7 h1:a+bsQ5rvGLjzHuww6tVxozPZFVghXaHOwFs4luLUK2k=
 github.com/hashicorp/golang-lru/v2 v2.0.7/go.mod h1:QeFd9opnmA6QUJc5vARoKUSoFhyfM2/ZepoAG6RGpeM=
 github.com/hashicorp/hcl v1.0.1-vault-5 h1:kI3hhbbyzr4dldA8UdTb7ZlVVlI2DACdCfz31RPDgJM=
 github.com/hashicorp/hcl v1.0.1-vault-5/go.mod h1:XYhtn6ijBSAj6n4YqAaf7RBPS4I06AItNorpy+MoQNM=
+github.com/hashicorp/logutils v1.0.0/go.mod h1:QIAnNjmIWmVIIkWDTG1z5v++HQmx9WQRO+LraFDTW64=
+github.com/hashicorp/mdns v1.0.4/go.mod h1:mtBihi+LeNXGtG8L9dX59gAEa12BDtBQSp4v/YAJqrc=
+github.com/hashicorp/memberlist v0.5.0 h1:EtYPN8DpAURiapus508I4n9CzHs2W+8NZGbmmR/prTM=
+github.com/hashicorp/memberlist v0.5.0/go.mod h1:yvyXLpo0QaGE59Y7hDTsTzDD25JYBZ4mHgHUZ8lrOI0=
+github.com/hashicorp/serf v0.10.1 h1:Z1H2J60yRKvfDYAOZLd2MU0ND4AH/WDz7xYHDWQsIPY=
+github.com/hashicorp/serf v0.10.1/go.mod h1:yL2t6BqATOLGc5HF7qbFkTfXoPIY0WZdWHfEvMqbG+4=
 github.com/hexops/gotextdiff v1.0.3 h1:gitA9+qJrrTCsiCl7+kh75nPqQt1cx4ZkudSTLoUqJM=
 github.com/hexops/gotextdiff v1.0.3/go.mod h1:pSWU5MAI3yDq+fZBTazCSJysOMbxWL1BSow5/V2vxeg=
 github.com/hpcloud/tail v1.0.0/go.mod h1:ab1qPbhIpdTxEkNHXyeSf5vhxWSCs/tWer42PpOxQnU=
@@ -486,6 +538,7 @@ github.com/jsimonetti/rtnetlink/v2 v2.0.1 h1:xda7qaHDSVOsADNouv7ukSuicKZO7GgVUCX
 github.com/jsimonetti/rtnetlink/v2 v2.0.1/go.mod h1:7MoNYNbb3UaDHtF8udiJo/RH6VsTKP1pqKLUTVCvToE=
 github.com/json-iterator/go v1.1.6/go.mod h1:+SdeFBvtyEkXs7REEP0seUULqWtbJapLOCVDaaPEHmU=
 github.com/json-iterator/go v1.1.7/go.mod h1:KdQUCv79m/52Kvf8AW2vK1V8akMuk1QjK/uOdHXbAo4=
+github.com/json-iterator/go v1.1.9/go.mod h1:KdQUCv79m/52Kvf8AW2vK1V8akMuk1QjK/uOdHXbAo4=
 github.com/json-iterator/go v1.1.12 h1:PV8peI4a0ysnczrg+LtxykD8LfKY9ML6u2jnxaEnrnM=
 github.com/json-iterator/go v1.1.12/go.mod h1:e30LSqwooZae/UwlEbR2852Gd8hjQvJoHmT4TnhNGBo=
 github.com/julienschmidt/httprouter v1.2.0/go.mod h1:SYymIcj16QtmaHHD7aYtjjsJG7VTCxuUUipMqKk8s4w=
@@ -503,6 +556,7 @@ github.com/konsorten/go-windows-terminal-sequences v1.0.3/go.mod h1:T0+1ngSBFLxv
 github.com/kr/logfmt v0.0.0-20140226030751-b84e30acd515/go.mod h1:+0opPa2QZZtGFBFZlji/RkVcI2GknAs/DXo4wKdlNEc=
 github.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=
 github.com/kr/pretty v0.2.0/go.mod h1:ipq/a2n7PKx3OHsz4KJII5eveXtPO4qwEXGdVfWzfnI=
+github.com/kr/pretty v0.2.1/go.mod h1:ipq/a2n7PKx3OHsz4KJII5eveXtPO4qwEXGdVfWzfnI=
 github.com/kr/pretty v0.3.1 h1:flRD4NNwYAUpkphVc1HcthR4KEIFJ65n8Mw5qdRn3LE=
 github.com/kr/pretty v0.3.1/go.mod h1:hoEshYVHaxMs3cyo3Yncou5ZscifuDolrwPKZanG3xk=
 github.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=
@@ -527,10 +581,16 @@ github.com/magiconair/properties v1.8.7 h1:IeQXZAiQcpL9mgcAe1Nu6cX9LLw6ExEHKjN0V
 github.com/magiconair/properties v1.8.7/go.mod h1:Dhd985XPs7jluiymwWYZ0G4Z61jb3vdS329zhj2hYo0=
 github.com/mailru/easyjson v0.7.7 h1:UGYAvKxe3sBsEDzO8ZeWOSlIQfWFlxbzLZe7hwFURr0=
 github.com/mailru/easyjson v0.7.7/go.mod h1:xzfreul335JAWq5oZzymOObrkdz5UnU4kGfJJLY9Nlc=
+github.com/mattn/go-colorable v0.0.9/go.mod h1:9vuHe8Xs5qXnSaW/c/ABM9alt+Vo+STaOChaDxuIBZU=
+github.com/mattn/go-colorable v0.1.4/go.mod h1:U0ppj6V5qS13XJ6of8GYAs25YV2eR4EVcfRqFIhoBtE=
+github.com/mattn/go-colorable v0.1.6/go.mod h1:u6P/XSegPjTcexA+o6vUJrdnUu04hMope9wVRipJSqc=
 github.com/mattn/go-colorable v0.1.9/go.mod h1:u6P/XSegPjTcexA+o6vUJrdnUu04hMope9wVRipJSqc=
 github.com/mattn/go-colorable v0.1.12/go.mod h1:u5H1YNBxpqRaxsYJYSkiCWKzEfiAb1Gb520KVy5xxl4=
 github.com/mattn/go-colorable v0.1.13 h1:fFA4WZxdEF4tXPZVKMLwD8oUnCTTo08duU7wxecdEvA=
 github.com/mattn/go-colorable v0.1.13/go.mod h1:7S9/ev0klgBDR4GtXTXX8a3vIGJpMovkB8vQcUbaXHg=
+github.com/mattn/go-isatty v0.0.3/go.mod h1:M+lRXTBqGeGNdLjl/ufCoiOlB5xdOkqRJdNxMWT7Zi4=
+github.com/mattn/go-isatty v0.0.8/go.mod h1:Iq45c/XA43vh69/j3iqttzPXn0bhXyGjM0Hdxcsrc5s=
+github.com/mattn/go-isatty v0.0.11/go.mod h1:PhnuNfih5lzO57/f3n+odYbM4JtupLOxQOAqxQCu2WE=
 github.com/mattn/go-isatty v0.0.12/go.mod h1:cbi8OIDigv2wuxKPP5vlRcQ1OAZbq2CE4Kysco4FUpU=
 github.com/mattn/go-isatty v0.0.14/go.mod h1:7GGIvUiUoEMVVmxf/4nioHXj79iQHKdU27kJ6hsGG94=
 github.com/mattn/go-isatty v0.0.16/go.mod h1:kYGgaQfpe5nmfYZH+SKPsOc2e4SrIfOl2e/yFXSvRLM=
@@ -559,16 +619,20 @@ github.com/mdlayher/packet v1.1.2/go.mod h1:GEu1+n9sG5VtiRE4SydOmX5GTwyyYlteZiFU
 github.com/mdlayher/socket v0.2.1/go.mod h1:QLlNPkFR88mRUNQIzRBMfXxwKal8H7u1h3bL1CV+f0E=
 github.com/mdlayher/socket v0.4.1 h1:eM9y2/jlbs1M615oshPQOHZzj6R6wMT7bX5NPiQvn2U=
 github.com/mdlayher/socket v0.4.1/go.mod h1:cAqeGjoufqdxWkD7DkpyS+wcefOtmu5OQ8KuoJGIReA=
+github.com/miekg/dns v1.1.26/go.mod h1:bPDLeHnStXmXAq1m/Ch/hvfNHr14JKNPMBo3VZKjuso=
+github.com/miekg/dns v1.1.41/go.mod h1:p6aan82bvRIyn+zDIv9xYNUpwa73JcSh9BKwknJysuI=
 github.com/miekg/dns v1.1.62 h1:cN8OuEF1/x5Rq6Np+h1epln8OiyPWV+lROx9LxcGgIQ=
 github.com/miekg/dns v1.1.62/go.mod h1:mvDlcItzm+br7MToIKqkglaGhlFMHJ9DTNNWONWXbNQ=
 github.com/mikioh/ipaddr v0.0.0-20190404000644-d465c8ab6721 h1:RlZweED6sbSArvlE924+mUcZuXKLBHA35U7LN621Bws=
 github.com/mikioh/ipaddr v0.0.0-20190404000644-d465c8ab6721/go.mod h1:Ickgr2WtCLZ2MDGd4Gr0geeCH5HybhRJbonOgQpvSxc=
+github.com/mitchellh/cli v1.1.0/go.mod h1:xcISNoH86gajksDmfB23e/pu+B+GeFRMYmoHXxx3xhI=
 github.com/mitchellh/copystructure v1.2.0 h1:vpKXTN4ewci03Vljg/q9QvCGUDttBOGBIa15WveJJGw=
 github.com/mitchellh/copystructure v1.2.0/go.mod h1:qLl+cE2AmVv+CoeAwDPye/v+N2HKCj9FbZEVFJRxO9s=
 github.com/mitchellh/go-homedir v1.1.0 h1:lukF9ziXFxDFPkA1vsr5zpc1XuPDn/wFntq5mG+4E0Y=
 github.com/mitchellh/go-homedir v1.1.0/go.mod h1:SfyaCUpYCn1Vlf4IUYiD9fPX4A5wJrkLzIz1N1q0pr0=
 github.com/mitchellh/go-wordwrap v1.0.1 h1:TLuKupo69TCn6TQSyGxwI1EblZZEsQ0vMlAFQflz0v0=
 github.com/mitchellh/go-wordwrap v1.0.1/go.mod h1:R62XHJLzvMFRBbcrT7m7WgmE1eOyTSsCt+hzestvNj0=
+github.com/mitchellh/mapstructure v0.0.0-20160808181253-ca63d7c062ee/go.mod h1:FVVH3fgwuzCH5S8UJGiWEs2h04kUh9fWfEaFds41c1Y=
 github.com/mitchellh/mapstructure v1.5.0 h1:jeMsZIYE/09sWLaz43PL7Gy6RuMjD2eJVyuac5Z2hdY=
 github.com/mitchellh/mapstructure v1.5.0/go.mod h1:bFUtVrKA4DC2yAKiSyO/QUcy7e+RRV2QTWOzhPopBRo=
 github.com/mitchellh/reflectwalk v1.0.2 h1:G2LzWKi524PWgd3mLHV8Y5k7s6XUvT0Gef6zxSIeXaQ=
@@ -630,6 +694,9 @@ github.com/osrg/gobgp v2.0.0+incompatible h1:91ARQbE1AtO0U4TIxHPJ7wYVZIqduyBwS1+
 github.com/osrg/gobgp v2.0.0+incompatible/go.mod h1:vGVJPLW6JFDD7WA1vJsjB8OKmbbC2TKwHtr90CZS/u4=
 github.com/osrg/gobgp/v3 v3.29.0 h1:ISWjY5YQ45THcvXWdG2ykzXWxS22rgE6U9YWdaI/ki8=
 github.com/osrg/gobgp/v3 v3.29.0/go.mod h1:ZGeSti9mURR/o5hf5R6T1FM5g1yiEBZbhP+TuqYJUpI=
+github.com/pascaldekloe/goe v0.0.0-20180627143212-57f6aae5913c/go.mod h1:lzWF7FIEvWOWxwDKqyGYQf6ZUaNfKdP144TG7ZOy1lc=
+github.com/pascaldekloe/goe v0.1.0 h1:cBOtyMzM9HTpWjXfbbunk26uA6nG3a8n06Wieeh0MwY=
+github.com/pascaldekloe/goe v0.1.0/go.mod h1:lzWF7FIEvWOWxwDKqyGYQf6ZUaNfKdP144TG7ZOy1lc=
 github.com/pelletier/go-toml v1.9.5 h1:4yBQzkHv+7BHq2PQUZF3Mx0IYxG7LsP222s7Agd3ve8=
 github.com/pelletier/go-toml v1.9.5/go.mod h1:u1nR/EPcESfeI/szUZKdtJ0xRNbUoANCkoOuaOx1Y+c=
 github.com/pelletier/go-toml/v2 v2.2.2 h1:aYUidT7k73Pcl9nb2gScu7NSrKCSHIDE89b3+6Wq+LM=
@@ -642,43 +709,53 @@ github.com/phayes/freeport v0.0.0-20220201140144-74d24b5ae9f5 h1:Ii+DKncOVM8Cu1H
 github.com/phayes/freeport v0.0.0-20220201140144-74d24b5ae9f5/go.mod h1:iIss55rKnNBTvrwdmkUpLnDpZoAHvWaiq5+iMmen4AE=
 github.com/pkg/browser v0.0.0-20240102092130-5ac0b6a4141c h1:+mdjkGKdHQG3305AYmdv1U2eRNDiU2ErMBj1gwrq8eQ=
 github.com/pkg/browser v0.0.0-20240102092130-5ac0b6a4141c/go.mod h1:7rwL4CYBLnjLxUqIJNnCWiEdr3bn6IUYi15bNlnbCCU=
+github.com/pkg/diff v0.0.0-20210226163009-20ebb0f2a09e/go.mod h1:pJLUxLENpZxwdsKMEsNbx1VGcRFpLqf3715MtcvvzbA=
 github.com/pkg/errors v0.8.0/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=
+github.com/pkg/errors v0.8.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=
 github.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=
 github.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=
 github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=
 github.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2 h1:Jamvg5psRIccs7FGNTlIRMkT8wgtp5eCXdBlqhYGL6U=
 github.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=
+github.com/posener/complete v1.1.1/go.mod h1:em0nMJCgc9GFtwrmVmEMR/ZL6WyhyjMBndrE9hABlRI=
+github.com/posener/complete v1.2.3/go.mod h1:WZIdtGGp+qx0sLrYKtIRAruyNpv6hFCicSgv7Sy7s/s=
 github.com/poy/onpar v1.1.2 h1:QaNrNiZx0+Nar5dLgTVp5mXkyoVFIbepjyEoGSnhbAY=
 github.com/poy/onpar v1.1.2/go.mod h1:6X8FLNoxyr9kkmnlqpK6LSoiOtrO6MICtWwEuWkLjzg=
 github.com/prometheus/client_golang v0.9.1/go.mod h1:7SWBe2y4D6OKWSNQJUaRYU/AaXPKyh/dDVn+NZz0KFw=
 github.com/prometheus/client_golang v1.0.0/go.mod h1:db9x61etRT2tGnBNRi70OPL5FsnadC4Ky3P0J6CfImo=
 github.com/prometheus/client_golang v1.1.0/go.mod h1:I1FGZT9+L76gKKOs5djB6ezCbFQP1xR9D75/vuwEF3g=
+github.com/prometheus/client_golang v1.4.0/go.mod h1:e9GMxYsXl05ICDXkRhurwBS4Q3OK1iX/F2sw+iXX5zU=
 github.com/prometheus/client_golang v1.20.4 h1:Tgh3Yr67PaOv/uTqloMsCEdeuFTatm5zIq5+qNN23vI=
 github.com/prometheus/client_golang v1.20.4/go.mod h1:PIEt8X02hGcP8JWbeHyeZ53Y/jReSnHgO035n//V5WE=
 github.com/prometheus/client_model v0.0.0-20180712105110-5c3871d89910/go.mod h1:MbSGuTsp3dbXC40dX6PRTWyKYBIrTGTE9sqQNg2J8bo=
 github.com/prometheus/client_model v0.0.0-20190129233127-fd36f4220a90/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=
 github.com/prometheus/client_model v0.0.0-20190812154241-14fe0d1b01d4/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=
+github.com/prometheus/client_model v0.2.0/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=
 github.com/prometheus/client_model v0.6.1 h1:ZKSh/rekM+n3CeS952MLRAdFwIKqeY8b62p8ais2e9E=
 github.com/prometheus/client_model v0.6.1/go.mod h1:OrxVMOVHjw3lKMa8+x6HeMGkHMQyHDk9E3jmP2AmGiY=
 github.com/prometheus/common v0.4.1/go.mod h1:TNfzLD0ON7rHzMJeJkieUDPYmFC7Snx/y86RQel1bk4=
 github.com/prometheus/common v0.6.0/go.mod h1:eBmuwkDJBwy6iBfxCBob6t6dR6ENT/y+J+Zk0j9GMYc=
+github.com/prometheus/common v0.9.1/go.mod h1:yhUN8i9wzaXS3w1O07YhxHEBxD+W35wd8bs7vj7HSQ4=
 github.com/prometheus/common v0.60.0 h1:+V9PAREWNvJMAuJ1x1BaWl9dewMW4YrHZQbx0sJNllA=
 github.com/prometheus/common v0.60.0/go.mod h1:h0LYf1R1deLSKtD4Vdg8gy4RuOvENW2J/h19V5NADQw=
 github.com/prometheus/procfs v0.0.0-20181005140218-185b4288413d/go.mod h1:c3At6R/oaqEKCNdg8wHV1ftS6bRYblBhIjjI8uT2IGk=
 github.com/prometheus/procfs v0.0.2/go.mod h1:TjEm7ze935MbeOT/UhFTIMYKhuLP4wbCsTZCD3I8kEA=
 github.com/prometheus/procfs v0.0.3/go.mod h1:4A/X28fw3Fc593LaREMrKMqOKvUAntwMDaekg4FpcdQ=
+github.com/prometheus/procfs v0.0.8/go.mod h1:7Qr8sr6344vo1JqZ6HhLceV9o3AJ1Ff+GxbHq6oeK9A=
 github.com/prometheus/procfs v0.15.1 h1:YagwOFzUgYfKKHX6Dr+sHT7km/hxC76UB0learggepc=
 github.com/prometheus/procfs v0.15.1/go.mod h1:fB45yRUv8NstnjriLhBQLuOUt+WW4BsoGhij/e3PBqk=
 github.com/rivo/uniseg v0.2.0/go.mod h1:J6wj4VEh+S6ZtnVlnTBMWIodfgj8LQOQFoIToxlJtxc=
 github.com/rivo/uniseg v0.4.4 h1:8TfxU8dW6PdqD27gjM8MVNuicgxIjxpm4K7x4jp8sis=
 github.com/rivo/uniseg v0.4.4/go.mod h1:FN3SvrM+Zdj16jyLfmOkMNblXMcoc8DfTHruCPUcx88=
 github.com/rogpeppe/fastuuid v1.2.0/go.mod h1:jVj6XXZzXRy/MSR5jhDC/2q6DgLz+nrA6LYCDYWNEvQ=
+github.com/rogpeppe/go-internal v1.9.0/go.mod h1:WtVeX8xhTBvf0smdhujwtBcq4Qrzq/fJaraNFVN+nFs=
 github.com/rogpeppe/go-internal v1.12.0 h1:exVL4IDcn6na9z1rAb56Vxr+CgyK3nn3O+epU5NdKM8=
 github.com/rogpeppe/go-internal v1.12.0/go.mod h1:E+RYuTGaKKdloAfM02xzb0FW3Paa99yedzYV+kq4uf4=
 github.com/rubenv/sql-migrate v1.7.0 h1:HtQq1xyTN2ISmQDggnh0c9U3JlP8apWh8YO2jzlXpTI=
 github.com/rubenv/sql-migrate v1.7.0/go.mod h1:S4wtDEG1CKn+0ShpTtzWhFpHHI5PvCUtiGI+C+Z2THE=
 github.com/russross/blackfriday/v2 v2.1.0 h1:JIOH55/0cWyOuilr9/qlrm0BSXldqnqwMsf35Ld67mk=
 github.com/russross/blackfriday/v2 v2.1.0/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=
+github.com/ryanuber/columnize v0.0.0-20160712163229-9b3edd62028f/go.mod h1:sm1tb6uqfes/u+d4ooFouqFdy9/2g9QGwK3SQygK0Ts=
 github.com/sagikazarmark/locafero v0.4.0 h1:HApY1R9zGo4DBgr7dqsTH/JJxLTTsOt7u6keLGt6kNQ=
 github.com/sagikazarmark/locafero v0.4.0/go.mod h1:Pe1W6UlPYUk/+wc/6KFhbORCfqzgYEpgQ3O5fPuL3H4=
 github.com/sagikazarmark/slog-shim v0.1.0 h1:diDBnUNK9N/354PgrxMywXnAwEr1QZcOr6gto+ugjYE=
@@ -687,6 +764,8 @@ github.com/sasha-s/go-deadlock v0.3.5 h1:tNCOEEDG6tBqrNDOX35j/7hL5FcFViG6awUGROb
 github.com/sasha-s/go-deadlock v0.3.5/go.mod h1:bugP6EGbdGYObIlx7pUZtWqlvo8k9H6vCBBsiChJQ5U=
 github.com/satori/go.uuid v1.2.0 h1:0uYX9dsZ2yD7q2RtLRtPSdGDWzjeM3TbMJP9utgA0ww=
 github.com/satori/go.uuid v1.2.0/go.mod h1:dA0hQrYB0VpLJoorglMZABFdXlWrHn1NEOzdhQKdks0=
+github.com/sean-/seed v0.0.0-20170313163322-e2103e2c3529 h1:nn5Wsu0esKSJiIVhscUtVbo7ada43DJhG55ua/hjS5I=
+github.com/sean-/seed v0.0.0-20170313163322-e2103e2c3529/go.mod h1:DxrIzT+xaE7yg65j358z/aeFdxmN0P9QXhEzd20vsDc=
 github.com/sergi/go-diff v1.1.0/go.mod h1:STckp+ISIX8hZLjrqAeVduY0gWCT9IjLuqbuNXdaHfM=
 github.com/sergi/go-diff v1.3.1 h1:xkr+Oxo4BOQKmkn/B9eMK0g5Kg/983T9DqqPHwYqD+8=
 github.com/sergi/go-diff v1.3.1/go.mod h1:aMJSSKb2lpPvRNec0+w3fl7LP9IOFzdc9Pa4NFbPK1I=
@@ -696,6 +775,7 @@ github.com/shopspring/decimal v1.4.0 h1:bxl37RwXBklmTi0C79JfXCEBD1cqqHt0bbgBAGFp
 github.com/shopspring/decimal v1.4.0/go.mod h1:gawqmDU56v4yIKSwfBSFip1HdCCXN8/+DMd9qYNcwME=
 github.com/sirupsen/logrus v1.2.0/go.mod h1:LxeOpSwHxABJmUn/MG1IvRgCAasNZTLOkJPxbbu5VWo=
 github.com/sirupsen/logrus v1.3.0/go.mod h1:LxeOpSwHxABJmUn/MG1IvRgCAasNZTLOkJPxbbu5VWo=
+github.com/sirupsen/logrus v1.4.2/go.mod h1:tLMulIdttU9McNUspp0xgXVQah82FyeX6MwdIuYE2rE=
 github.com/sirupsen/logrus v1.7.0/go.mod h1:yWOB1SBYBC5VeMP7gHvWumXLIWorT60ONWic61uBYv0=
 github.com/sirupsen/logrus v1.9.0/go.mod h1:naHLuLoDiP4jHNo9R0sCBMtWGeIprob74mVsIT4qYEQ=
 github.com/sirupsen/logrus v1.9.3 h1:dueUQJ1C2q9oE3F7wvmSGAaVtTmUizReu6fjN8uqzbQ=
@@ -749,6 +829,7 @@ github.com/tidwall/pretty v1.2.0 h1:RWIZEg2iJ8/g6fDDYzMpobmaoGh5OLl4AXtGUGPcqCs=
 github.com/tidwall/pretty v1.2.0/go.mod h1:ITEVvHYasfjBbM0u2Pg8T2nJnzm8xPwvNhhsoaGGjNU=
 github.com/tidwall/sjson v1.2.5 h1:kLy8mja+1c9jlljvWTlSazM7cKDRfJuR/bOJhcY5NcY=
 github.com/tidwall/sjson v1.2.5/go.mod h1:Fvgq9kS/6ociJEDnK0Fk1cpYF4FIW6ZF7LAe+6jwd28=
+github.com/tv42/httpunix v0.0.0-20150427012821-b75d8614f926/go.mod h1:9ESjWnEqriFuLhtthL60Sar/7RFoluCcXsuvEwTV5KM=
 github.com/uber/jaeger-client-go v2.30.0+incompatible h1:D6wyKGCecFaSRUpo8lCVbaOOb6ThwMmTEbhRwtKR97o=
 github.com/uber/jaeger-client-go v2.30.0+incompatible/go.mod h1:WVhlPFC8FDjOFMMWRy2pZqQJSXxYSwNYOkTr/Z6d3Kk=
 github.com/uber/jaeger-lib v2.4.1+incompatible h1:td4jdvLcExb4cBISKIpHuGoVXh+dVKhn2Um6rjCsSsg=
@@ -846,6 +927,7 @@ go4.org/netipx v0.0.0-20231129151722-fdeea329fbba/go.mod h1:PLyyIXexvUFg3Owu6p/W
 golang.org/x/crypto v0.0.0-20180904163835-0709b304e793/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=
 golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
 golang.org/x/crypto v0.0.0-20190510104115-cbcb75029529/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
+golang.org/x/crypto v0.0.0-20190923035154-9ee001bba392/go.mod h1:/lpIB1dKB+9EgE3H3cr1v9wB50oz8l4C4h62xy7jSTY=
 golang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
 golang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
 golang.org/x/crypto v0.0.0-20201124201722-c8d3bf9c5392/go.mod h1:jdWPYTVW3xRLrWPugEBEK3UY2ZEsg3UU495nc5E+M+I=
@@ -891,6 +973,7 @@ golang.org/x/net v0.0.0-20190503192946-f4e77d36d62c/go.mod h1:t9HGtf8HONx5eT2rtn
 golang.org/x/net v0.0.0-20190603091049-60506f45cf65/go.mod h1:HSz+uSET+XFnRR8LxR5pz3Of3rY3CfYBVs4xY44aLks=
 golang.org/x/net v0.0.0-20190613194153-d28f0bde5980/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
 golang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
+golang.org/x/net v0.0.0-20190923162816-aa69164e4478/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
 golang.org/x/net v0.0.0-20200202094626-16171245cfb2/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
 golang.org/x/net v0.0.0-20200226121028-0de0cce0169b/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
 golang.org/x/net v0.0.0-20200520004742-59133d7f0dd7/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=
@@ -900,6 +983,7 @@ golang.org/x/net v0.0.0-20201021035429-f5854403a974/go.mod h1:sp8m0HH+o8qH0wwXwY
 golang.org/x/net v0.0.0-20201110031124-69a78807bb2b/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=
 golang.org/x/net v0.0.0-20201209123823-ac852fbbde11/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=
 golang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=
+golang.org/x/net v0.0.0-20210410081132-afb366fc7cd1/go.mod h1:9tjilg8BloeKEkVJvy7fQ90B1CfIiPueXVOjqfkSzI8=
 golang.org/x/net v0.0.0-20211112202133-69e39bad7dc2/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=
 golang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=
 golang.org/x/net v0.6.0/go.mod h1:2Tu9+aMcznHK/AK1HMvgo6xiTLG5rD5rZLDS+rp2Bjs=
@@ -924,19 +1008,25 @@ golang.org/x/sync v0.0.0-20220722155255-886fb9371eb4/go.mod h1:RxMgew5VJxzue5/jJ
 golang.org/x/sync v0.1.0/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.8.0 h1:3NFvSEYkUoMifnESzZl15y791HH1qU2xm6eCJU5ZPXQ=
 golang.org/x/sync v0.8.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=
+golang.org/x/sys v0.0.0-20180823144017-11551d06cbcc/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
 golang.org/x/sys v0.0.0-20180830151530-49385e6e1522/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
 golang.org/x/sys v0.0.0-20180905080454-ebe1bf3edb33/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
 golang.org/x/sys v0.0.0-20180909124046-d0be0721c37e/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
 golang.org/x/sys v0.0.0-20181116152217-5ac8a444bdc5/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
 golang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
+golang.org/x/sys v0.0.0-20190222072716-a9d3bda3a223/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
 golang.org/x/sys v0.0.0-20190312061237-fead79001313/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20190422165155-953cdadca894/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20190801041406-cbf593c0f2f3/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20190904154756-749cb33beabd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20190922100055-0a153f010e69/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20190924154521-2837fb4f24fe/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20191005200804-aed5e4c7ecf9/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20191026070338-33540a1f6037/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20191120155948-bd437916bb0e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20200116001909-b77594299b42/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20200122134326-e047566fdf82/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20200223170610-d5e6a3e2c0ae/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20200323222414-85ca7c5b95cd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20200602100848-8d3cce7afc34/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
@@ -945,6 +1035,8 @@ golang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7w
 golang.org/x/sys v0.0.0-20201126233918-771906719818/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20210112080510-489259a85091/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20210119212857-b64e53b001e4/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20210303074136-134d130e1a04/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+golang.org/x/sys v0.0.0-20210330210617-4fbd30eecc44/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20210423082822-04245dca01da/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.0.0-20210616094352-59db8d763f22/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
@@ -955,6 +1047,7 @@ golang.org/x/sys v0.0.0-20220503163025-988cb79eb6c6/go.mod h1:oPkhp1MJrh7nUepCBc
 golang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.0.0-20220715151400-c0bba94af5f8/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
+golang.org/x/sys v0.0.0-20220728004956-3c1f35247d10/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.0.0-20220811171246-fbc7d0a398ab/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.1.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.2.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
@@ -976,6 +1069,7 @@ golang.org/x/term v0.15.0/go.mod h1:BDl952bC7+uMoWR75FIrCDx79TPU9oHkTZ9yRbYOrX0=
 golang.org/x/term v0.25.0 h1:WtHI/ltw4NvSUig5KARz9h521QvRC8RmF/cuYqifU24=
 golang.org/x/term v0.25.0/go.mod h1:RPyXicDX+6vLxogjjRxjgD2TKtmAO6NZBsBRfrOLu7M=
 golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
+golang.org/x/text v0.3.2/go.mod h1:bEr9sfX3Q8Zfm5fL9x+3itogRgK3+ptLWKqgva+5dAk=
 golang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/text v0.3.4/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
@@ -995,6 +1089,7 @@ golang.org/x/tools v0.0.0-20190206041539-40960b6deb8e/go.mod h1:n7NCudcB/nEzxVGm
 golang.org/x/tools v0.0.0-20190226205152-f727befe758c/go.mod h1:9Yl7xja0Znq3iFh3HoIrodX9oNMXvdceNzlUR8zjMvY=
 golang.org/x/tools v0.0.0-20190311212946-11955173bddd/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=
 golang.org/x/tools v0.0.0-20190524140312-2c0ae7006135/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=
+golang.org/x/tools v0.0.0-20190907020128-2ca718005c18/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
 golang.org/x/tools v0.0.0-20191012152004-8de300cfc20a/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
 golang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
 golang.org/x/tools v0.0.0-20200505023115-26f46d2f7ef8/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=
@@ -1074,6 +1169,7 @@ gopkg.in/yaml.v2 v2.2.1/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
 gopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
 gopkg.in/yaml.v2 v2.2.3/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
 gopkg.in/yaml.v2 v2.2.4/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
+gopkg.in/yaml.v2 v2.2.5/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
 gopkg.in/yaml.v2 v2.2.8/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
 gopkg.in/yaml.v2 v2.3.0/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
 gopkg.in/yaml.v2 v2.4.0 h1:D8xgwECY7CYvx+Y2n4sBz93Jn9JRvxdiyyo8CTfuKaY=
diff --git a/install/kubernetes/cilium/cm.yaml b/install/kubernetes/cilium/cm.yaml
new file mode 100644
index 0000000000..c7acd75a92
--- /dev/null
+++ b/install/kubernetes/cilium/cm.yaml
@@ -0,0 +1,16 @@
+apiVersion: v1
+kind: ConfigMap
+metadata:
+  name: bgp-config
+  namespace: kube-system
+data:
+  config.yaml: |
+    peers:
+      - peer-address: 10.0.0.1
+        peer-asn: 64512
+        my-asn: 64512
+    address-pools:
+      - name: default
+        protocol: bgp
+        addresses:
+          - 192.0.2.0/24
diff --git a/install/kubernetes/cilium/templates/cilium-agent/daemonset.yaml b/install/kubernetes/cilium/templates/cilium-agent/daemonset.yaml
index 200850afb0..7bd6ac4aaf 100644
--- a/install/kubernetes/cilium/templates/cilium-agent/daemonset.yaml
+++ b/install/kubernetes/cilium/templates/cilium-agent/daemonset.yaml
@@ -80,6 +80,14 @@ spec:
         {{- toYaml . | nindent 8 }}
         {{- end }}
     spec:
+      affinity:
+        nodeAffinity:
+          requiredDuringSchedulingIgnoredDuringExecution:
+            nodeSelectorTerms:
+              - matchExpressions:
+                - key: "marvell.com/dpu"
+                  operator: NotIn
+                  values: ["true"]
       {{- with .Values.imagePullSecrets }}
       imagePullSecrets:
         {{- toYaml . | nindent 8 }}
@@ -764,8 +772,8 @@ spec:
       dnsPolicy: {{ .Values.dnsPolicy }}
       {{- end }}
       {{- if (eq .Values.scheduling.mode "anti-affinity")  }}
-      {{- with .Values.affinity }}
-      affinity:
+      {{- with .Values.nodeSelector }}
+      nodeSelector:
         {{- toYaml . | nindent 8 }}
       {{- end }}
       {{- end }}
diff --git a/install/kubernetes/cilium/templates/cilium-operator/deployment.yaml b/install/kubernetes/cilium/templates/cilium-operator/deployment.yaml
index 44b39294ba..bdae2f5632 100644
--- a/install/kubernetes/cilium/templates/cilium-operator/deployment.yaml
+++ b/install/kubernetes/cilium/templates/cilium-operator/deployment.yaml
@@ -61,6 +61,14 @@ spec:
         {{- toYaml . | nindent 8 }}
         {{- end }}
     spec:
+      affinity:
+        nodeAffinity:
+          requiredDuringSchedulingIgnoredDuringExecution:
+            nodeSelectorTerms:
+              - matchExpressions:
+                - key: "marvell.com/dpu"
+                  operator: NotIn
+                  values: ["true"]
       {{- with .Values.imagePullSecrets }}
       imagePullSecrets:
         {{- toYaml . | nindent 8 }}
@@ -263,10 +271,10 @@ spec:
       priorityClassName: {{ include "cilium.priorityClass" (list $ .Values.operator.priorityClassName "system-cluster-critical") }}
       serviceAccountName: {{ .Values.serviceAccounts.operator.name | quote }}
       automountServiceAccountToken: {{ .Values.serviceAccounts.operator.automount }}
-      {{- with .Values.operator.affinity }}
+      {{- with .Values.nodeSelector }}
       # In HA mode, cilium-operator pods must not be scheduled on the same
       # node as they will clash with each other.
-      affinity:
+      nodeSelector:
         {{- toYaml . | trim | nindent 8 }}
       {{- end }}
       {{- with .Values.operator.topologySpreadConstraints }}
diff --git a/pkg/datapath/connector/vf.go b/pkg/datapath/connector/vf.go
new file mode 100644
index 0000000000..fc2d21502b
--- /dev/null
+++ b/pkg/datapath/connector/vf.go
@@ -0,0 +1,78 @@
+
+package connector
+
+import (
+	"fmt"
+	"os/exec"
+
+	"github.com/vishvananda/netlink"
+)
+
+/* CNI Offload: SetupVF() configures DPU side VF */
+func SetupVF(VfName string, mtu, groIPv6MaxSize, gsoIPv6MaxSize, groIPv4MaxSize, gsoIPv4MaxSize int) (error) {
+       // Disable reverse path filter on the host side vf peer to allow
+       // container addresses to be used as source address when the linux
+       // stack performs routing.
+       cmdS := fmt.Sprintf("net.ipv4.conf.%s.rp_filter=0", VfName)
+       cmd := exec.Command("/usr/sbin/sysctl", "-w", cmdS)
+       if err := cmd.Run(); err != nil {
+               return fmt.Errorf("unable to disable rp_filter (%s): %s", VfName, err)
+       }
+
+       vf, err := netlink.LinkByName(VfName)
+       if err != nil {
+               return fmt.Errorf("unable to lookup vf peer just created: %s", err)
+       }
+
+       if err = netlink.LinkSetMTU(vf, mtu); err != nil {
+               return fmt.Errorf("unable to set MTU to %q: %s", VfName, err)
+       }
+
+       if err = netlink.LinkSetUp(vf); err != nil {
+               return fmt.Errorf("unable to bring up vf pair: %s", err)
+       }
+
+       if groIPv6MaxSize > 0 {
+               if err = netlink.LinkSetGROMaxSize(vf, groIPv6MaxSize); err != nil {
+                       return fmt.Errorf("unable to set GRO max size to %q: %w",
+                               VfName, err)
+               }
+       }
+
+       if gsoIPv6MaxSize > 0 {
+               if err = netlink.LinkSetGSOMaxSize(vf, gsoIPv6MaxSize); err != nil {
+                       return fmt.Errorf("unable to set GSO max size to %q: %w",
+                               VfName, err)
+               }
+       }
+
+       if groIPv4MaxSize > 0 {
+               if err = netlink.LinkSetGROIPv4MaxSize(vf, groIPv4MaxSize); err != nil {
+                       return fmt.Errorf("unable to set GRO max size to %q: %w",
+                               VfName, err)
+               }
+       }
+
+       if gsoIPv4MaxSize > 0 {
+               if err = netlink.LinkSetGSOIPv4MaxSize(vf, gsoIPv4MaxSize); err != nil {
+                       return fmt.Errorf("unable to set GSO max size to %q: %w",
+                               VfName, err)
+               }
+       }
+
+       return nil
+}
+
+/* CNI Offload: DisableVF() disables DPU side VF */
+func DisableVF(VfName string) (error) {
+       vf, err := netlink.LinkByName(VfName)
+       if err != nil {
+               return fmt.Errorf("unable to lookup vf peer just created: %s", err)
+       }
+
+       if err = netlink.LinkSetDown(vf); err != nil {
+               return fmt.Errorf("unable to bring down vf pair: %s", err)
+       }
+
+       return nil
+}
diff --git a/pkg/datapath/linux/config/config.go b/pkg/datapath/linux/config/config.go
index 66d6cb477b..e19f5e04d1 100644
--- a/pkg/datapath/linux/config/config.go
+++ b/pkg/datapath/linux/config/config.go
@@ -244,6 +244,8 @@ func (h *HeaderfileWriter) WriteNodeConfig(w io.Writer, cfg *datapath.LocalNodeC
 		cDefinesMap["PREALLOCATE_MAPS"] = "1"
 	}
 
+	cDefinesMap["MARVELL_DPU_OFFLOAD"] = "1"
+
 	cDefinesMap["EVENTS_MAP"] = eventsmap.MapName
 	cDefinesMap["EVENTS_MAP_RATE_LIMIT"] = fmt.Sprintf("%d", option.Config.BPFEventsDefaultRateLimit)
 	cDefinesMap["EVENTS_MAP_BURST_LIMIT"] = fmt.Sprintf("%d", option.Config.BPFEventsDefaultBurstLimit)
diff --git a/pkg/k8s/watchers/cilium_endpoint.go b/pkg/k8s/watchers/cilium_endpoint.go
index 66f8623f6a..0e5b11a43a 100644
--- a/pkg/k8s/watchers/cilium_endpoint.go
+++ b/pkg/k8s/watchers/cilium_endpoint.go
@@ -11,6 +11,8 @@ import (
 
 	"github.com/cilium/hive/cell"
 	"github.com/sirupsen/logrus"
+	"k8s.io/client-go/kubernetes"
+	"k8s.io/client-go/rest"
 
 	agentK8s "github.com/cilium/cilium/daemon/k8s"
 	"github.com/cilium/cilium/pkg/endpointmanager"
@@ -28,6 +30,7 @@ import (
 	"github.com/cilium/cilium/pkg/source"
 	ciliumTypes "github.com/cilium/cilium/pkg/types"
 	"github.com/cilium/cilium/pkg/u8proto"
+	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 )
 
 type k8sCiliumEndpointsWatcherParams struct {
@@ -209,7 +212,62 @@ func (k *K8sCiliumEndpointsWatcher) endpointUpdated(oldEndpoint, endpoint *types
 		return
 	}
 
+
 	nodeIP := net.ParseIP(endpoint.Networking.NodeIP)
+
+	//Code to fix hostIP change in tunnel endpoint in ipcache
+	log.Info("CNI Offload: ipcache redirect: endpoint %v",endpoint)
+
+	//Create in kube-config clusterconfig
+	config, err := rest.InClusterConfig()
+	if err != nil {
+		log.Error("CNI Offload: ipcache redirect: Error in cluster config: %v\n", err)
+		return
+	}
+
+	// Create the clientset
+	clientset, err := kubernetes.NewForConfig(config)
+	if err != nil {
+		log.Error("CNI Offload: ipcache redirect: Error in clientset: %v\n", err)
+		return
+	}
+
+	//get the pod object from clientset.CoreV1
+	pod, err := clientset.CoreV1().Pods(endpoint.Namespace).Get(context.Background(), endpoint.Name, metav1.GetOptions{})
+	if err != nil {
+		log.Error("CNI Offload: ipcache redirect: Error in pod object info%v\n", err)
+		return
+	}
+	nodeName := pod.Spec.NodeName
+
+	// fetch k8s node using endpoint.Namespace/endpoint.Name
+	node, err := clientset.CoreV1().Nodes().Get(context.Background(), nodeName, metav1.GetOptions{})
+	if err != nil {
+		log.Error("CNI Offload: ipcache redirect: Error in node object info %v\n", err)
+		return
+	}
+
+	// check if the node label has cni.offload=<hyd1432-dpu>
+	// if yes, fetch k8s node using label value (which is hyd1432-dpu here)
+	// set nodeIP = dpunode.IP
+	labelKey := "cni.offload"
+	if val, ok := node.Labels[labelKey]; ok {
+		log.Info("Node %s has label %s with value %s\n", nodeName, labelKey, val)
+		dpuNode, err := clientset.CoreV1().Nodes().Get(context.Background(), val, metav1.GetOptions{})
+		if err != nil {
+			log.Info("CNI Offload: ipcache redirect: Error in dpu node object info %v\n", err)
+			return
+		}
+		for _, address := range dpuNode.Status.Addresses {
+			if address.Type == "InternalIP" {
+				nodeIP = net.ParseIP(address.Address)
+				break
+			}
+		}
+	} else {
+		log.Info("Node %s does not have label %s nodeIP %v\n", nodeName, labelKey, nodeIP)
+	}
+
 	if nodeIP == nil {
 		log.WithField("nodeIP", endpoint.Networking.NodeIP).Warning("Unable to parse node IP while processing CiliumEndpoint update")
 		return
diff --git a/pkg/k8s/watchers/pod.go b/pkg/k8s/watchers/pod.go
index 408bd548a8..d620c22a80 100644
--- a/pkg/k8s/watchers/pod.go
+++ b/pkg/k8s/watchers/pod.go
@@ -148,6 +148,10 @@ type K8sPodWatcher struct {
 	// variable is written for the first time.
 	podStoreSet  chan struct{}
 	podStoreOnce sync.Once
+	remotePodStoreMU lock.RWMutex
+	remotePodStore   cache.Store
+	remotePodStoreSet  chan struct{}
+	remotePodStoreOnce sync.Once
 
 	// controllersStarted is a channel that is closed when all watchers that do not depend on
 	// local node configuration have been started
@@ -252,12 +256,62 @@ func (k *K8sPodWatcher) podsInit(asyncControllers *sync.WaitGroup) {
 		return cancel
 	}
 
+	// CNI Offload: watch pod events on Host
+	watchRemotePods := func() context.CancelFunc {
+		ctx, cancel := context.WithCancel(context.Background())
+		var synced atomic.Bool
+		go func() {
+			pods := make(map[resource.Key]*slim_corev1.Pod)
+			for ev := range k.resources.RemotePods.Events(ctx) {
+				switch ev.Kind {
+				case resource.Sync:
+					// Set the pod store now that resource has synchronized. Only
+					// error expected is if we're being stopped (context cancelled).
+					podStore, err := k.resources.RemotePods.Store(ctx)
+					if err == nil {
+						k.remotePodStoreMU.Lock()
+						k.remotePodStore = podStore.CacheStore()
+						k.remotePodStoreMU.Unlock()
+						//k.remotePodStoreOnce.Do(func() {
+						//	close(k.remotePodStoreSet)
+						//})
+					}
+					synced.Store(true)
+				case resource.Upsert:
+					newPod := ev.Object
+					oldPod := pods[ev.Key]
+					if oldPod == nil {
+						k.addK8sPodV1(newPod)
+					} else {
+						k.updateK8sPodV1(oldPod, newPod)
+					}
+					k.k8sResourceSynced.SetEventTimestamp(podApiGroup)
+					pods[ev.Key] = newPod
+				case resource.Delete:
+					k.deleteK8sPodV1(ev.Object)
+					k.k8sResourceSynced.SetEventTimestamp(podApiGroup)
+					delete(pods, ev.Key)
+				}
+
+				ev.Done(nil)
+			}
+		}()
+
+		k.k8sResourceSynced.BlockWaitGroupToSyncResources(ctx.Done(), nil, synced.Load, resources.K8sAPIGroupPodV1Core)
+		once.Do(func() {
+			asyncControllers.Done()
+			k.k8sAPIGroups.AddAPI(resources.K8sAPIGroupPodV1Core)
+		})
+		return cancel
+	}
+
 	// We will watch for pods on th entire cluster to keep existing
 	// functionality untouched. If we are running with CiliumEndpoint CRD
 	// enabled then it means that we can simply watch for pods that are created
 	// for this node.
 	if !option.Config.DisableCiliumEndpointCRD {
 		watchNodePods()
+		watchRemotePods()
 		return
 	}
 
@@ -289,11 +343,13 @@ func (k *K8sPodWatcher) podsInit(asyncControllers *sync.WaitGroup) {
 
 		log.WithField(logfields.Node, nodeTypes.GetName()).Info("Connected to KVStore, watching for pod events on node")
 		cancelWatchNodePods := watchNodePods()
+		cancelWatchRemotePods := watchRemotePods()
 
 		// Create a new pod controller when we are disconnected with the
 		// kvstore
 		<-kvstore.Client().Disconnected()
 		cancelWatchNodePods()
+		cancelWatchRemotePods()
 		log.Info("Disconnected from KVStore, watching for pod events all nodes")
 	}
 }
@@ -1066,15 +1122,37 @@ func (k *K8sPodWatcher) GetCachedPod(namespace, name string) (*slim_corev1.Pod,
 			Namespace: namespace,
 		},
 	}
+
+	podList := k.podStore.List()
+
 	podInterface, exists, err := k.podStore.Get(pName)
 	if err != nil {
 		return nil, err
 	}
+
 	if !exists {
-		return nil, k8sErrors.NewNotFound(schema.GroupResource{
-			Group:    "core",
-			Resource: "pod",
-		}, name)
+		podInterface, exists, err := k.remotePodStore.Get(pName)
+		if err != nil {
+			log.WithField("CNI offload:", err).Info("k.remotePodStore.Get failed for pod %v", pName)
+			return nil, k8sErrors.NewNotFound(schema.GroupResource{
+				Group:    "core",
+				Resource: "pod",
+			}, name)
+		}
+
+		if !exists {
+			podList = k.remotePodStore.List()
+			log.WithField("CNI offload: List of remote pods in cache", podList).Info(
+					"k.remotePodStore.Get pod %v not found", pName)
+			return nil, k8sErrors.NewNotFound(schema.GroupResource{
+				Group:    "core",
+				Resource: "pod",
+			}, name)
+		}
+
+		log.WithField("CNI offload:", pName).Info("exists")
+		return podInterface.(*slim_corev1.Pod).DeepCopy(), nil
 	}
+
 	return podInterface.(*slim_corev1.Pod).DeepCopy(), nil
 }
diff --git a/plugins/cilium-cni/types/types.go b/plugins/cilium-cni/types/types.go
index cd4b2f673e..d511c093ab 100644
--- a/plugins/cilium-cni/types/types.go
+++ b/plugins/cilium-cni/types/types.go
@@ -32,6 +32,7 @@ type NetConf struct {
 	LogFormat      string                 `json:"log-format"`
 	LogFile        string                 `json:"log-file"`
 	ChainingMode   string                 `json:"chaining-mode"`
+	MacAddr        string                 `json:"MacAddr"`
 }
 
 // IPAM is the Cilium specific CNI IPAM configuration
diff --git a/plugins/cilium-offload-cni/.gitignore b/plugins/cilium-offload-cni/.gitignore
new file mode 100644
index 0000000000..91ed4073f7
--- /dev/null
+++ b/plugins/cilium-offload-cni/.gitignore
@@ -0,0 +1 @@
+cilium-cni
diff --git a/plugins/cilium-offload-cni/23-cep.conf b/plugins/cilium-offload-cni/23-cep.conf
new file mode 100644
index 0000000000..c580cf0afe
--- /dev/null
+++ b/plugins/cilium-offload-cni/23-cep.conf
@@ -0,0 +1,7 @@
+{
+   "cniVersion": "0.3.1",
+   "name": "cep",
+   "type": "cilium-offload-cni",
+    "enable-debug": true,
+    "log-file": "/var/run/cilium/cilium-cni.log"
+}
diff --git a/plugins/cilium-offload-cni/Makefile b/plugins/cilium-offload-cni/Makefile
new file mode 100644
index 0000000000..233f4259d7
--- /dev/null
+++ b/plugins/cilium-offload-cni/Makefile
@@ -0,0 +1,19 @@
+# Copyright Authors of Cilium
+# SPDX-License-Identifier: Apache-2.0
+
+include ../../Makefile.defs
+
+TARGET := cilium-offload-cni
+
+.PHONY: all $(TARGET) clean
+
+all: $(TARGET)
+
+$(TARGET):
+	@$(ECHO_GO)
+	$(QUIET)$(GO_BUILD) -o $@
+
+clean:
+	@$(ECHO_CLEAN)
+	-$(QUIET)rm -f $(TARGET)
+	$(QUIET)$(GO_CLEAN)
diff --git a/plugins/cilium-offload-cni/cmd/cmd.go b/plugins/cilium-offload-cni/cmd/cmd.go
new file mode 100644
index 0000000000..26df5382a0
--- /dev/null
+++ b/plugins/cilium-offload-cni/cmd/cmd.go
@@ -0,0 +1,927 @@
+// SPDX-License-Identifier: Apache-2.0
+// Copyright Authors of Cilium
+
+package cmd
+
+import (
+	"context"
+	"errors"
+	"fmt"
+	"net"
+	"net/netip"
+	"os"
+	"sort"
+
+	cniInvoke "github.com/containernetworking/cni/pkg/invoke"
+	"github.com/containernetworking/cni/pkg/skel"
+	cniTypes "github.com/containernetworking/cni/pkg/types"
+	cniTypesV1 "github.com/containernetworking/cni/pkg/types/100"
+	cniVersion "github.com/containernetworking/cni/pkg/version"
+	gops "github.com/google/gops/agent"
+	"github.com/google/uuid"
+	"github.com/sirupsen/logrus"
+	"github.com/vishvananda/netlink"
+	"go4.org/netipx"
+	"golang.org/x/sys/unix"
+
+	"github.com/cilium/cilium/api/v1/models"
+	"github.com/cilium/cilium/pkg/client"
+	"github.com/cilium/cilium/pkg/datapath/connector"
+	"github.com/cilium/cilium/pkg/datapath/linux/route"
+	"github.com/cilium/cilium/pkg/datapath/linux/sysctl"
+	"github.com/cilium/cilium/pkg/defaults"
+	endpointid "github.com/cilium/cilium/pkg/endpoint/id"
+	ipamOption "github.com/cilium/cilium/pkg/ipam/option"
+	"github.com/cilium/cilium/pkg/logging"
+	"github.com/cilium/cilium/pkg/logging/hooks"
+	"github.com/cilium/cilium/pkg/logging/logfields"
+	"github.com/cilium/cilium/pkg/netns"
+	chainingapi "github.com/cilium/cilium/plugins/cilium-cni/chaining/api"
+	_ "github.com/cilium/cilium/plugins/cilium-cni/chaining/awscni"
+	_ "github.com/cilium/cilium/plugins/cilium-cni/chaining/azure"
+	_ "github.com/cilium/cilium/plugins/cilium-cni/chaining/flannel"
+	_ "github.com/cilium/cilium/plugins/cilium-cni/chaining/generic-veth"
+	"github.com/cilium/cilium/plugins/cilium-cni/lib"
+	"github.com/cilium/cilium/plugins/cilium-cni/types"
+)
+
+const (
+	// defaultLogMaxBackups is to make sure that we have an upper bound on disk space used by
+	// CNI file logging (e.g. < 7 * 100 MB).
+	defaultLogMaxBackups = 7
+)
+
+var (
+	log            = logging.DefaultLogger.WithField(logfields.LogSubsys, "cilium-offload-cni")
+	getNetnsCookie = true
+)
+
+// Cmd provides methods for the CNI ADD, DEL and CHECK commands.
+type Cmd struct {
+	cfg EndpointConfigurator
+}
+
+// Option allows the customization of the Cmd implementation
+type Option func(cmd *Cmd)
+
+// WithEPConfigurator is used to create a Cmd instance with a custom
+// endpoint configurator. The endpoint configurator can be used to customize
+// the creation of endpoints during the CNI ADD invocation.
+// This function is exported to be accessed outside the tree.
+func WithEPConfigurator(cfg EndpointConfigurator) Option {
+	return func(cmd *Cmd) {
+		cmd.cfg = cfg
+	}
+}
+
+// NewCmd creates a new Cmd instance with Add, Del and Check methods
+func NewCmd(opts ...Option) *Cmd {
+	cmd := &Cmd{
+		cfg: &DefaultConfigurator{},
+	}
+	for _, opt := range opts {
+		opt(cmd)
+	}
+	return cmd
+}
+
+// CNIFuncs returns the CNI functions supported by Cilium that can be passed to skel.PluginMainFuncs
+func (cmd *Cmd) CNIFuncs() skel.CNIFuncs {
+	return skel.CNIFuncs{
+		Add:   cmd.Add,
+		Del:   cmd.Del,
+		Check: cmd.Check,
+	}
+}
+
+type CmdState struct {
+	IP6       netip.Addr
+	IP6routes []route.Route
+	IP6rules  []route.Rule
+	IP4       netip.Addr
+	IP4routes []route.Route
+	IP4rules  []route.Rule
+	HostAddr  *models.NodeAddressing
+}
+
+func ipv6IsEnabled(ipam *models.IPAMResponse) bool {
+	if ipam == nil || ipam.Address.IPV6 == "" {
+		return false
+	}
+
+	if ipam.HostAddressing == nil || ipam.HostAddressing.IPV6 == nil {
+		return false
+	}
+
+	return ipam.HostAddressing.IPV6.Enabled
+}
+
+func ipv4IsEnabled(ipam *models.IPAMResponse) bool {
+	if ipam == nil || ipam.Address.IPV4 == "" {
+		return false
+	}
+
+	if ipam.HostAddressing == nil || ipam.HostAddressing.IPV4 == nil {
+		return false
+	}
+
+	return ipam.HostAddressing.IPV4.Enabled
+}
+
+func getConfigFromCiliumAgent(client *client.Client) (*models.DaemonConfigurationStatus, error) {
+	configResult, err := client.ConfigGet()
+	if err != nil {
+		return nil, fmt.Errorf("unable to retrieve configuration from Cilium agent: %w", err)
+	}
+
+	if configResult == nil || configResult.Status == nil {
+		return nil, errors.New("received empty configuration object from Cilium agent")
+	}
+
+	return configResult.Status, nil
+}
+
+func allocateIPsWithCiliumAgent(client *client.Client, cniArgs *types.ArgsSpec, ipamPoolName string) (*models.IPAMResponse, func(context.Context), error) {
+	podName := string(cniArgs.K8S_POD_NAMESPACE) + "/" + string(cniArgs.K8S_POD_NAME)
+
+	ipam, err := client.IPAMAllocate("", podName, ipamPoolName, true)
+	if err != nil {
+		return nil, nil, fmt.Errorf("unable to allocate IP via local cilium agent: %w", err)
+	}
+
+	if ipam.Address == nil {
+		return nil, nil, errors.New("invalid IPAM response, missing addressing")
+	}
+
+	releaseFunc := func(context.Context) {
+		if ipam.Address != nil {
+			releaseIP(client, ipam.Address.IPV4, ipam.Address.IPV4PoolName)
+			releaseIP(client, ipam.Address.IPV6, ipam.Address.IPV6PoolName)
+		}
+	}
+
+	return ipam, releaseFunc, nil
+}
+
+func releaseIP(client *client.Client, ip, pool string) {
+	if ip != "" {
+		if err := client.IPAMReleaseIP(ip, pool); err != nil {
+			log.WithError(err).WithFields(logrus.Fields{
+				logfields.IPAddr: ip,
+				"pool":           pool,
+			}).Warn("Unable to release IP")
+		}
+	}
+}
+
+func allocateIPsWithDelegatedPlugin(
+	ctx context.Context,
+	conf *models.DaemonConfigurationStatus,
+	netConf *types.NetConf,
+	stdinData []byte,
+) (*models.IPAMResponse, func(context.Context), error) {
+	ipamRawResult, err := cniInvoke.DelegateAdd(ctx, netConf.IPAM.Type, stdinData, nil)
+	if err != nil {
+		// Since IP allocation failed, there are no IPs to clean up, so we don't need to return a releaseFunc.
+		return nil, nil, fmt.Errorf("failed to invoke delegated plugin ADD for IPAM: %w", err)
+	}
+
+	// CNI spec says if an error occurs, invoke DEL on the delegated plugin to release IPs.
+	releaseFunc := func(ctx context.Context) {
+		cniInvoke.DelegateDel(ctx, netConf.IPAM.Type, stdinData, nil)
+	}
+
+	ipamResult, err := cniTypesV1.NewResultFromResult(ipamRawResult)
+	if err != nil {
+		return nil, releaseFunc, fmt.Errorf("could not interpret delegated IPAM result for CNI version %s: %w", cniTypesV1.ImplementedSpecVersion, err)
+	}
+
+	// Translate the IPAM result into the same format as a response from Cilium agent.
+	ipam := &models.IPAMResponse{
+		HostAddressing: conf.Addressing,
+		Address:        &models.AddressPair{},
+	}
+
+	// Safe to assume at most one IP per family. The K8s API docs say:
+	// "Pods may be allocated at most 1 value for each of IPv4 and IPv6"
+	// https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/
+	for _, ipConfig := range ipamResult.IPs {
+		ipNet := ipConfig.Address
+		if ipv4 := ipNet.IP.To4(); ipv4 != nil {
+			ipam.Address.IPV4 = ipNet.String()
+			ipam.IPV4 = &models.IPAMAddressResponse{IP: ipv4.String()}
+		} else if conf.Addressing.IPV6 != nil {
+			// assign ipam ipv6 address only if agent ipv6 config is enabled
+			ipam.Address.IPV6 = ipNet.String()
+			ipam.IPV6 = &models.IPAMAddressResponse{IP: ipNet.IP.String()}
+		}
+	}
+
+	return ipam, releaseFunc, nil
+}
+
+func addIPConfigToLink(ip netip.Addr, routes []route.Route, rules []route.Rule, link netlink.Link, ifName string) error {
+	log.WithFields(logrus.Fields{
+		logfields.IPAddr:    ip,
+		"netLink":           logfields.Repr(link),
+		logfields.Interface: ifName,
+	}).Debug("Configuring link")
+
+	addr := &netlink.Addr{IPNet: netipx.AddrIPNet(ip)}
+	if ip.Is6() {
+		addr.Flags = unix.IFA_F_NODAD
+	}
+	if err := netlink.AddrAdd(link, addr); err != nil {
+		return fmt.Errorf("failed to add addr to %q: %w", ifName, err)
+	}
+
+	// Sort provided routes to make sure we apply any more specific
+	// routes first which may be used as nexthops in wider routes
+	sort.Sort(route.ByMask(routes))
+
+	for _, r := range routes {
+		log.WithField("route", logfields.Repr(r)).Debug("Adding route")
+		rt := &netlink.Route{
+			LinkIndex: link.Attrs().Index,
+			Scope:     netlink.SCOPE_UNIVERSE,
+			Dst:       &r.Prefix,
+			MTU:       r.MTU,
+			Table:     r.Table,
+		}
+
+		if r.Nexthop == nil {
+			rt.Scope = netlink.SCOPE_LINK
+		} else {
+			rt.Gw = *r.Nexthop
+		}
+
+		if err := netlink.RouteAdd(rt); err != nil {
+			if !os.IsExist(err) {
+				return fmt.Errorf("failed to add route '%s via %v dev %v': %w",
+					r.Prefix.String(), r.Nexthop, ifName, err)
+			}
+		}
+	}
+
+	for _, r := range rules {
+		log.WithField("rule", logfields.Repr(r)).Debug("Adding rule")
+		var err error
+		if ip.Is4() {
+			err = route.ReplaceRule(r)
+		} else {
+			err = route.ReplaceRuleIPv6(r)
+		}
+		if err != nil {
+			return fmt.Errorf("failed to add rule '%s for dev %v': %w", r, ifName, err)
+		}
+	}
+
+	return nil
+}
+
+func configureIface(ipam *models.IPAMResponse, ifName string, state *CmdState) (string, error) {
+	l, err := netlink.LinkByName(ifName)
+	if err != nil {
+		return "", fmt.Errorf("failed to lookup %q: %w", ifName, err)
+	}
+
+	if err := netlink.LinkSetUp(l); err != nil {
+		return "", fmt.Errorf("failed to set %q UP: %w", ifName, err)
+	}
+
+	if ipv4IsEnabled(ipam) {
+		if err := addIPConfigToLink(state.IP4, state.IP4routes, state.IP4rules, l, ifName); err != nil {
+			return "", fmt.Errorf("error configuring IPv4: %w", err)
+		}
+	}
+
+	if ipv6IsEnabled(ipam) {
+		if err := addIPConfigToLink(state.IP6, state.IP6routes, state.IP6rules, l, ifName); err != nil {
+			return "", fmt.Errorf("error configuring IPv6: %w", err)
+		}
+	}
+
+	if l.Attrs() != nil {
+		return l.Attrs().HardwareAddr.String(), nil
+	}
+
+	return "", nil
+}
+
+func newCNIRoute(r route.Route) *cniTypes.Route {
+	rt := &cniTypes.Route{
+		Dst: r.Prefix,
+	}
+	if r.Nexthop != nil {
+		rt.GW = *r.Nexthop
+	}
+
+	return rt
+}
+
+func prepareIP(ipAddr string, state *CmdState, mtu int) (*cniTypesV1.IPConfig, []*cniTypes.Route, error) {
+	var (
+		routes []route.Route
+		gw     string
+		ip     netip.Addr
+	)
+
+	// This handles both scenarios for handling IPaddress as CIDR as well as IPaddress
+	// from delegated Ipam and cilium-agent
+	ipPrefix, err := netip.ParsePrefix(ipAddr)
+	if err != nil {
+		ip, err = netip.ParseAddr(ipAddr)
+	} else {
+		ip = ipPrefix.Addr()
+	}
+
+	if err != nil {
+		return nil, nil, err
+	}
+
+	if ip.Is6() {
+		state.IP6 = ip
+		if state.HostAddr != nil {
+			if routes, err = connector.IPv6Routes(state.HostAddr, mtu); err != nil {
+				return nil, nil, err
+			}
+			state.IP6routes = append(state.IP6routes, routes...)
+			gw = connector.IPv6Gateway(state.HostAddr)
+		}
+	} else {
+		state.IP4 = ip
+		if state.HostAddr != nil {
+			if routes, err = connector.IPv4Routes(state.HostAddr, mtu); err != nil {
+				return nil, nil, err
+			}
+			state.IP4routes = append(state.IP4routes, routes...)
+			gw = connector.IPv4Gateway(state.HostAddr)
+		}
+	}
+
+	rt := make([]*cniTypes.Route, 0, len(routes))
+	for _, r := range routes {
+		rt = append(rt, newCNIRoute(r))
+	}
+
+	var gwIP net.IP
+	if gw != "" {
+		gwIP = net.ParseIP(gw)
+		if gwIP == nil {
+			return nil, nil, fmt.Errorf("invalid gateway address: %s", gw)
+		}
+	}
+
+	return &cniTypesV1.IPConfig{
+		Address: *netipx.AddrIPNet(ip),
+		Gateway: gwIP,
+	}, rt, nil
+}
+
+func setupLogging(n *types.NetConf) error {
+	f := n.LogFormat
+	if f == "" {
+		f = string(logging.DefaultLogFormatTimestamp)
+	}
+	logOptions := logging.LogOptions{
+		logging.FormatOpt: f,
+	}
+	err := logging.SetupLogging([]string{}, logOptions, "cilium-offload-cni", n.EnableDebug)
+	if err != nil {
+		return err
+	}
+
+	if len(n.LogFile) != 0 {
+		logging.AddHooks(hooks.NewFileRotationLogHook(n.LogFile,
+			hooks.EnableCompression(),
+			hooks.WithMaxBackups(defaultLogMaxBackups),
+		))
+	}
+
+	return nil
+}
+
+func reserveLocalIPPorts(conf *models.DaemonConfigurationStatus, sysctl sysctl.Sysctl) error {
+	if conf.IPLocalReservedPorts == "" {
+		return nil
+	}
+
+	// Note: This setting applies to IPv4 and IPv6
+	var (
+		param    = []string{"net", "ipv4", "ip_local_reserved_ports"}
+		reserved = conf.IPLocalReservedPorts
+	)
+
+	// Append our reserved ports to the ones which might already be reserved.
+	existing, err := sysctl.Read(param)
+	if err != nil {
+		return err
+	}
+
+	// Merging the two sets of ports. Note that the kernel merges any redundant
+	// ports or port ranges for us, so we do not have to check if `existing`
+	// and `reserved` contain any overlapping ports.
+	if existing != "" {
+		reserved = existing + "," + reserved
+	}
+	return sysctl.Write(param, reserved)
+}
+
+func (cmd *Cmd) Add(args *skel.CmdArgs) (err error) {
+	n, err := types.LoadNetConf(args.StdinData)
+	if err != nil {
+		return fmt.Errorf("unable to parse CNI configuration %q: %w", string(args.StdinData), err)
+	}
+
+	if err = setupLogging(n); err != nil {
+		return fmt.Errorf("unable to setup logging: %w", err)
+	}
+
+	logger := loggerWithArguments(log.WithField(logfields.EventUUID, uuid.New()), args)
+
+	if n.EnableDebug {
+		if err := gops.Listen(gops.Options{}); err != nil {
+			log.WithError(err).Warn("Unable to start gops")
+		} else {
+			defer gops.Close()
+		}
+	}
+	logger.WithField("netconf", logfields.Repr(n)).Debugf("Processing CNI ADD request")
+
+	if n.PrevResult != nil {
+		logger.WithField("previousResult", logfields.Repr(n.PrevResult)).Debugf("CNI Previous result")
+	}
+
+	cniArgs := &types.ArgsSpec{}
+	if err = cniTypes.LoadArgs(args.Args, cniArgs); err != nil {
+		return fmt.Errorf("unable to extract CNI arguments: %w", err)
+	}
+	logger = loggerWithCNIArgs(logger, cniArgs)
+
+	c, err := client.NewDefaultClientWithTimeout(defaults.ClientConnectTimeout)
+	if err != nil {
+		return fmt.Errorf("unable to connect to Cilium agent: %w", client.Hint(err))
+	}
+
+	conf, err := getConfigFromCiliumAgent(c)
+	if err != nil {
+		return err
+	}
+
+	// If CNI ADD gives us a PrevResult, we're a chained plugin and *must* detect a
+	// valid chained mode. If no chained mode we understand is specified, error out.
+	// Otherwise, continue with normal plugin execution.
+	if len(n.NetConf.RawPrevResult) != 0 {
+		if chainAction, err := getChainedAction(n, logger); chainAction != nil {
+			var (
+				res *cniTypesV1.Result
+				ctx = chainingapi.PluginContext{
+					Logger:     logger,
+					Args:       args,
+					CniArgs:    cniArgs,
+					NetConf:    n,
+					CiliumConf: conf,
+				}
+			)
+
+			res, err = chainAction.Add(context.TODO(), ctx, c)
+			if err != nil {
+				logger.WithError(err).Warn("Chained ADD failed")
+				return err
+			}
+			logger.WithField("result", logfields.Repr(res)).Debugf("Returning result")
+			return cniTypes.PrintResult(res, n.CNIVersion)
+		} else if err != nil {
+			logger.WithError(err).Error("Invalid chaining mode")
+			return err
+		} else {
+			// no chained action supplied; this is an error
+			logger.Error("CNI PrevResult supplied, but not in chaining mode -- this is invalid, please set chaining-mode in CNI configuration")
+			return errors.New("CNI PrevResult supplied, but not in chaining mode -- this is invalid, please set chaining-mode in CNI configuration")
+		}
+	}
+
+	res := &cniTypesV1.Result{}
+	configs, err := cmd.cfg.GetConfigurations(ConfigurationParams{log, conf, args, cniArgs})
+	if err != nil {
+		return fmt.Errorf("failed to determine endpoint configuration: %w", err)
+	}
+
+	for _, epConf := range configs {
+		var ipam *models.IPAMResponse
+		var releaseIPsFunc func(context.Context)
+		if conf.IpamMode == ipamOption.IPAMDelegatedPlugin {
+			ipam, releaseIPsFunc, err = allocateIPsWithDelegatedPlugin(context.TODO(), conf, n, args.StdinData)
+			logger.Debugf("\nallocateIPsWithDelegatedPlugin\n")
+		} else {
+			ipam, releaseIPsFunc, err = allocateIPsWithCiliumAgent(c, cniArgs, epConf.IPAMPool())
+			logger.Debugf("\nallocateIPsWithCiliumAgent \n")
+		}
+
+		// release addresses on failure
+		defer func() {
+			if err != nil && releaseIPsFunc != nil {
+				releaseIPsFunc(context.TODO())
+			}
+		}()
+
+		if err != nil {
+			return err
+		}
+
+		if err = connector.SufficientAddressing(ipam.HostAddressing); err != nil {
+			return fmt.Errorf("IP allocation addressing is insufficient: %w", err)
+		}
+
+		if !ipv6IsEnabled(ipam) && !ipv4IsEnabled(ipam) {
+			return errors.New("IPAM did provide neither IPv4 nor IPv6 address")
+		}
+
+		state, ep, err := epConf.PrepareEndpoint(ipam)
+		if err != nil {
+			return fmt.Errorf("unable to prepare endpoint configuration: %w", err)
+		}
+
+		var (
+			ipConfig *cniTypesV1.IPConfig
+			routes   []*cniTypes.Route
+		)
+		if ipv6IsEnabled(ipam) && conf.Addressing.IPV6 != nil {
+			ep.Addressing.IPV6 = ipam.Address.IPV6
+			ep.Addressing.IPV6PoolName = ipam.Address.IPV6PoolName
+			ep.Addressing.IPV6ExpirationUUID = ipam.IPV6.ExpirationUUID
+
+			ipConfig, routes, err = prepareIP(ep.Addressing.IPV6, state, int(conf.RouteMTU))
+			if err != nil {
+				return fmt.Errorf("unable to prepare IP addressing for %s: %w", ep.Addressing.IPV6, err)
+			}
+			// set the addresses interface index to that of the container-side interface
+			ipConfig.Interface = cniTypesV1.Int(len(res.Interfaces))
+			res.IPs = append(res.IPs, ipConfig)
+			res.Routes = append(res.Routes, routes...)
+		}
+
+		if ipv4IsEnabled(ipam) && conf.Addressing.IPV4 != nil {
+			ep.Addressing.IPV4 = ipam.Address.IPV4
+			ep.Addressing.IPV4PoolName = ipam.Address.IPV4PoolName
+			ep.Addressing.IPV4ExpirationUUID = ipam.IPV4.ExpirationUUID
+
+			ipConfig, routes, err = prepareIP(ep.Addressing.IPV4, state, int(conf.RouteMTU))
+			if err != nil {
+				return fmt.Errorf("unable to prepare IP addressing for %s: %w", ep.Addressing.IPV4, err)
+			}
+			// set the addresses interface index to that of the container-side interface
+			ipConfig.Interface = cniTypesV1.Int(len(res.Interfaces))
+			res.IPs = append(res.IPs, ipConfig)
+			res.Routes = append(res.Routes, routes...)
+		}
+
+		switch conf.IpamMode {
+		case ipamOption.IPAMENI, ipamOption.IPAMAzure, ipamOption.IPAMAlibabaCloud:
+			err = interfaceAdd(ipConfig, ipam.IPV4, conf)
+			if err != nil {
+				return fmt.Errorf("unable to setup interface datapath: %w", err)
+			}
+		}
+
+                logger.Debugf("Netconf MacAddr: %#v ifname: %v", n.MacAddr, args.IfName)
+                // MAC address of the interface in the container namespace
+                ep.Mac = string(n.MacAddr)
+                // DPU VF interface
+                DpuVf, err := netlink.LinkByName(args.IfName)
+                if err != nil {
+                        return fmt.Errorf("unable to lookup enp6s0f0vf1: %s", err)
+                }
+
+                // MAC address of the interface in the host namespace
+                ep.HostMac = DpuVf.Attrs().HardwareAddr.String()
+                // Index of the interface in the host namespace
+                ep.InterfaceIndex = int64(DpuVf.Attrs().Index)
+                // Name of the interface in the host namespace
+                ep.InterfaceName = args.IfName
+
+                // Set up the VF interface
+                err = connector.SetupVF(string(args.IfName), int(conf.DeviceMTU), int(conf.GROMaxSize), int(conf.GSOMaxSize),
+                int(conf.GROIPV4MaxSize), int(conf.GSOIPV4MaxSize))
+                if err != nil {
+                        return fmt.Errorf("unable to set up VF %s: (%s)", args.IfName, err)
+		}
+
+		ep.NetnsCookie = ""
+
+		// Specify that endpoint must be regenerated synchronously. See GH-4409.
+		ep.SyncBuildEndpoint = true
+		if _, err = c.EndpointCreate(ep); err != nil {
+			logger.WithError(err).WithField(logfields.ContainerID, ep.ContainerID).Warn("Unable to create endpoint")
+			return fmt.Errorf("unable to create endpoint: %w", err)
+		}
+
+		res.Interfaces = append(res.Interfaces, &cniTypesV1.Interface{
+			Name:    epConf.IfName(),
+			Mac:     ep.HostMac,
+			Sandbox: args.Netns,
+		})
+		logger.WithError(err).WithField(logfields.ContainerID, ep.ContainerID).Debug("Endpoint successfully created: result: %v", res)
+	}
+
+	return cniTypes.PrintResult(res, n.CNIVersion)
+}
+
+// Del is invoked on CNI DEL
+//
+// Note: ENI specific attributes do not need to be released as the ENIs and ENI
+// IPs can be reused and are not released until the node terminates.
+func (cmd *Cmd) Del(args *skel.CmdArgs) error {
+	// Note about when to return errors: kubelet will retry the deletion
+	// for a long time. Therefore, only return an error for errors which
+	// are guaranteed to be recoverable.
+	n, err := types.LoadNetConf(args.StdinData)
+	if err != nil {
+		return fmt.Errorf("unable to parse CNI configuration %q: %w", string(args.StdinData), err)
+	}
+
+	if err := setupLogging(n); err != nil {
+		return fmt.Errorf("unable to setup logging: %w", err)
+	}
+
+	logger := loggerWithArguments(log.WithField(logfields.EventUUID, uuid.New()), args)
+
+	if n.EnableDebug {
+		if err := gops.Listen(gops.Options{}); err != nil {
+			log.WithError(err).Warn("Unable to start gops")
+		} else {
+			defer gops.Close()
+		}
+	}
+	logger.WithField("netconf", logfields.Repr(n)).Debugf("Processing CNI DEL request")
+
+	cniArgs := &types.ArgsSpec{}
+	if err = cniTypes.LoadArgs(args.Args, cniArgs); err != nil {
+		return fmt.Errorf("unable to extract CNI arguments: %w", err)
+	}
+	logger = loggerWithCNIArgs(logger, cniArgs)
+
+	c, err := lib.NewDeletionFallbackClient(logger)
+	if err != nil {
+		return fmt.Errorf("unable to connect to Cilium agent: %w", err)
+	}
+
+	// If this is a chained plugin, then "delegate" to the special chaining mode and be done.
+	// Note: DEL always has PrevResult set, so that doesn't tell us if we're chained. Given
+	// that a CNI ADD could not have succeeded with an invalid chained mode, we should always
+	// find a valid chained mode
+	if chainAction, err := getChainedAction(n, logger); chainAction != nil {
+		var (
+			ctx = chainingapi.PluginContext{
+				Logger:  logger,
+				Args:    args,
+				CniArgs: cniArgs,
+				NetConf: n,
+			}
+		)
+
+		return chainAction.Delete(context.TODO(), ctx, c)
+	} else if err != nil {
+		logger.WithError(err).Error("Invalid chaining mode")
+		return err
+	}
+
+	req := &models.EndpointBatchDeleteRequest{ContainerID: args.ContainerID}
+	if err := c.EndpointDeleteMany(req); err != nil {
+		// EndpointDeleteMany returns an error in the following scenarios:
+		// DeleteEndpointInvalid: Invalid delete parameters, no need to retry
+		// DeleteEndpointNotFound: No need to retry
+		// DeleteEndpointErrors: Errors encountered while deleting,
+		//                       the endpoint is always deleted though, no
+		//                       need to retry
+		log.WithError(err).Warning("Errors encountered while deleting endpoint")
+	}
+
+        // Disable the VF interface
+        err = connector.DisableVF(string(args.IfName))
+
+	if n.IPAM.Type != "" {
+		// If using a delegated plugin for IPAM, attempt to release the IP.
+		// We do this *before* entering the network namespace, because the ns may
+		// have already been deleted, and we want to avoid leaking IPs.
+		err = cniInvoke.DelegateDel(context.TODO(), n.IPAM.Type, args.StdinData, nil)
+		if err != nil {
+			return err
+		}
+	}
+
+	return nil
+}
+
+// Check implements the cni CHECK verb.
+// It ensures that the interface is configured correctly
+//
+// Currently, it verifies that
+// - endpoint exists in the agent and is healthy
+// - the interface in the container is sane
+func (cmd *Cmd) Check(args *skel.CmdArgs) error {
+	n, err := types.LoadNetConf(args.StdinData)
+	if err != nil {
+		return cniTypes.NewError(cniTypes.ErrInvalidNetworkConfig, "InvalidNetworkConfig",
+			fmt.Sprintf("unable to parse CNI configuration \"%s\": %v", string(args.StdinData), err))
+	}
+
+	if err := setupLogging(n); err != nil {
+		return cniTypes.NewError(cniTypes.ErrInvalidNetworkConfig, "InvalidLoggingConfig",
+			fmt.Sprintf("unable to setup logging: %s", err))
+	}
+
+	logger := loggerWithArguments(log.WithField(logfields.EventUUID, uuid.New()), args)
+
+	if n.EnableDebug {
+		if err := gops.Listen(gops.Options{}); err != nil {
+			log.WithError(err).Warn("Unable to start gops")
+		} else {
+			defer gops.Close()
+		}
+	}
+	logger.WithField("netconf", logfields.Repr(n)).Debugf("Processing CNI CHECK request")
+
+	if n.PrevResult != nil {
+		logger.WithField("previousResult", logfields.Repr(n.PrevResult)).Debugf("CNI Previous result")
+	}
+
+	cniArgs := &types.ArgsSpec{}
+	if err = cniTypes.LoadArgs(args.Args, cniArgs); err != nil {
+		return cniTypes.NewError(cniTypes.ErrInvalidNetworkConfig, "InvalidArgs",
+			fmt.Sprintf("unable to extract CNI arguments: %s", err))
+	}
+	logger = loggerWithCNIArgs(logger, cniArgs)
+
+	c, err := client.NewDefaultClientWithTimeout(defaults.ClientConnectTimeout)
+	if err != nil {
+		// use ErrTryAgainLater to tell the runtime that this is not a check failure
+		return cniTypes.NewError(cniTypes.ErrTryAgainLater, "DaemonDown",
+			fmt.Sprintf("unable to connect to Cilium agent: %s", client.Hint(err)))
+	}
+
+	// If this is a chained plugin, then "delegate" to the special chaining mode and be done
+	// Note: CHECK always has PrevResult set, so that doesn't tell us if we're chained.
+	if chainAction, err := getChainedAction(n, logger); chainAction != nil {
+		var (
+			ctx = chainingapi.PluginContext{
+				Logger:  logger,
+				Args:    args,
+				CniArgs: cniArgs,
+				NetConf: n,
+			}
+		)
+
+		// err is nil on success
+		err := chainAction.Check(context.TODO(), ctx, c)
+		logger.WithError(err).Debugf("Chained CHECK %s returned", n.Name)
+		return err
+	} else if err != nil {
+		logger.WithError(err).Error("Invalid chaining mode")
+		return err
+	}
+
+	// mechanical: parse PrevResult
+	if err := cniVersion.ParsePrevResult(&n.NetConf); err != nil {
+		return err
+	}
+	prevResult, err := cniTypesV1.NewResultFromResult(n.NetConf.PrevResult)
+	if err != nil {
+		return err
+	}
+
+	// Ask the agent for the endpoint's health
+	eID := endpointid.NewCNIAttachmentID(args.ContainerID, args.IfName)
+	logger.WithField(logfields.EndpointID, eID).Debugf("Asking agent for healthz")
+	epHealth, err := c.EndpointHealthGet(eID)
+	if err != nil {
+		return cniTypes.NewError(types.CniErrHealthzGet, "HealthzFailed",
+			fmt.Sprintf("failed to retrieve container health: %s", err))
+	}
+
+	if epHealth.OverallHealth == models.EndpointHealthStatusFailure {
+		return cniTypes.NewError(types.CniErrUnhealthy, "Unhealthy",
+			"container is unhealthy in agent")
+	}
+	logger.Debugf("Container %s:%s has a healthy agent endpoint", args.ContainerID, args.IfName)
+
+	// Verify that the interface exists and has the desired IP address
+	// we can get the IP from the CNI previous result.
+	if err := verifyInterface(args.Netns, args.IfName, prevResult); err != nil {
+		return err
+	}
+
+	return nil
+}
+
+// verifyInterface verifies that a given interface exists in the netns
+// with the given addresses
+func verifyInterface(netnsPinPath, ifName string, expected *cniTypesV1.Result) error {
+	var wantAddresses []*cniTypesV1.IPConfig
+	for idx, iface := range expected.Interfaces {
+		if iface.Sandbox == "" {
+			continue
+		}
+		if iface.Name != ifName {
+			continue
+		}
+		for _, ip := range expected.IPs {
+			if ip.Interface != nil && *ip.Interface == idx {
+				wantAddresses = append(wantAddresses, ip)
+			}
+		}
+	}
+
+	// Enter the container's namespace and ensure that
+	// the interface looks good:
+	// - does it exist?
+	// - does it have the expected IPs?
+	//
+	// Possible future ideas:
+	// - mtu
+	// - routes
+	ns, err := netns.OpenPinned(netnsPinPath)
+	if err != nil {
+		return fmt.Errorf("opening netns pinned at %s: %w", netnsPinPath, err)
+	}
+	defer ns.Close()
+	return ns.Do(func() error {
+		link, err := netlink.LinkByName(ifName)
+		if err != nil {
+			return fmt.Errorf("cannot find container link %v", ifName)
+		}
+
+		addrList, err := netlink.AddrList(link, netlink.FAMILY_ALL)
+		if err != nil {
+			return fmt.Errorf("failed to list link addresses: %w", err)
+		}
+
+		for _, ip := range wantAddresses {
+			ourAddr := netlink.Addr{IPNet: &ip.Address}
+			match := false
+
+			for _, addr := range addrList {
+				if addr.Equal(ourAddr) {
+					match = true
+					break
+				}
+			}
+			if !match {
+				return fmt.Errorf("expected ip %v on interface %v", ourAddr, ifName)
+			}
+		}
+
+		return nil
+	})
+}
+
+// getChainedAction retrieves the desired chained action. It returns nil if there
+// is no chained action, and error if there is a configured chained action but it is
+// invalid.
+func getChainedAction(n *types.NetConf, logger *logrus.Entry) (chainingapi.ChainingPlugin, error) {
+	if n.ChainingMode != "" {
+		chainAction := chainingapi.Lookup(n.ChainingMode)
+		if chainAction == nil {
+			return nil, fmt.Errorf("invalid chaining-mode %s", n.ChainingMode)
+		}
+
+		logger.Infof("Using chained plugin %s", n.ChainingMode)
+		return chainAction, nil
+	}
+
+	// Chained action can either be explicitly enabled, or implicitly based on
+	// network name.
+	// Portmap is a special case; we used it to signify that the portmap plugin
+	// is included later in the chain, but we should treat it as a standard plugin.
+	if n.Name != chainingapi.DefaultConfigName && n.Name != "portmap" {
+		chainAction := chainingapi.Lookup(n.Name)
+		if chainAction == nil {
+			// In this case, we are just being called with a different network name;
+			// there isn't any chaining happening.
+			return nil, nil
+		}
+
+		logger.Infof("Using chained plugin %s", n.Name)
+		return chainAction, nil
+	}
+
+	// OK to return nil, nil if chaining isn't enabled.
+	return nil, nil
+}
+
+func loggerWithArguments(logger *logrus.Entry, args *skel.CmdArgs) *logrus.Entry {
+	return logger.WithFields(logrus.Fields{
+		logfields.ContainerID: args.ContainerID,
+		"netns":               args.Netns,
+		"ifName":              args.IfName,
+		"args":                args.Args,
+		logfields.Path:        args.Path,
+	})
+}
+
+func loggerWithCNIArgs(logger *logrus.Entry, cniArgs *types.ArgsSpec) *logrus.Entry {
+	return logger.WithFields(logrus.Fields{
+		logfields.K8sNamespace: cniArgs.K8S_POD_NAMESPACE,
+		logfields.K8sPodName:   cniArgs.K8S_POD_NAME,
+	})
+}
diff --git a/plugins/cilium-offload-cni/cmd/endpoint.go b/plugins/cilium-offload-cni/cmd/endpoint.go
new file mode 100644
index 0000000000..eda4094f3f
--- /dev/null
+++ b/plugins/cilium-offload-cni/cmd/endpoint.go
@@ -0,0 +1,96 @@
+// SPDX-License-Identifier: Apache-2.0
+// Copyright Authors of Cilium
+
+package cmd
+
+import (
+	"github.com/containernetworking/cni/pkg/skel"
+	"github.com/sirupsen/logrus"
+
+	"github.com/cilium/cilium/api/v1/models"
+	ipamOption "github.com/cilium/cilium/pkg/ipam/option"
+	"github.com/cilium/cilium/plugins/cilium-cni/types"
+)
+
+// EndpointConfigurator returns a list of endpoint configurations for a given
+// CNI ADD invocation. If the CNI ADD invocation should result in multiple endpoints
+// being created, it may return multiple endpoint configurations, one for each endpoint.
+type EndpointConfigurator interface {
+	GetConfigurations(p ConfigurationParams) ([]EndpointConfiguration, error)
+}
+
+// EndpointConfiguration determines the configuration of an endpoint to be
+// created during a CNI ADD invocation.
+type EndpointConfiguration interface {
+	// IfName specifies the container interface name to be used for this endpoint
+	IfName() string
+	// IPAMPool specifies which IPAM pool the endpoint's IP should be allocated from
+	IPAMPool() string
+
+	// PrepareEndpoint returns the interface configuration 'cmd' of the container
+	// namespace as well as the template for the endpoint creation request 'ep'.
+	PrepareEndpoint(ipam *models.IPAMResponse) (cmd *CmdState, ep *models.EndpointChangeRequest, err error)
+}
+
+// ConfigurationParams contains the arguments and Cilium configuration of a CNI
+// invocation. Those fields may be used by custom implementations of the
+// EndpointConfigurator interface to customize the CNI ADD call.
+type ConfigurationParams struct {
+	Log     *logrus.Entry
+	Conf    *models.DaemonConfigurationStatus
+	Args    *skel.CmdArgs
+	CniArgs *types.ArgsSpec
+}
+
+// DefaultConfigurator is the default endpoint configurator. It configures a
+// single endpoint for the interface name provided by the CNI ADD invocation,
+// using an auto-selected IPAM pool.
+type DefaultConfigurator struct{}
+
+// GetConfigurations returns a single a default configuration
+func (c *DefaultConfigurator) GetConfigurations(p ConfigurationParams) ([]EndpointConfiguration, error) {
+	return []EndpointConfiguration{
+		&defaultEndpointConfiguration{
+			ConfigurationParams: p,
+		},
+	}, nil
+}
+
+// defaultEndpointConfiguration is the default configuration when a single endpoint
+// is to be created
+type defaultEndpointConfiguration struct {
+	ConfigurationParams
+}
+
+func (c *defaultEndpointConfiguration) IfName() string {
+	return c.Args.IfName
+}
+
+func (c *defaultEndpointConfiguration) IPAMPool() string {
+	return "" // auto-select
+}
+
+func (c *defaultEndpointConfiguration) PrepareEndpoint(ipam *models.IPAMResponse) (cmd *CmdState, ep *models.EndpointChangeRequest, err error) {
+	ep = &models.EndpointChangeRequest{
+		ContainerID:            c.Args.ContainerID,
+		Labels:                 models.Labels{},
+		State:                  models.EndpointStateWaitingDashForDashIdentity.Pointer(),
+		Addressing:             &models.AddressPair{},
+		K8sPodName:             string(c.CniArgs.K8S_POD_NAME),
+		K8sNamespace:           string(c.CniArgs.K8S_POD_NAMESPACE),
+		K8sUID:                 string(c.CniArgs.K8S_POD_UID),
+		ContainerInterfaceName: c.Args.IfName,
+		DatapathConfiguration:  &models.EndpointDatapathConfiguration{},
+	}
+
+	if c.Conf.IpamMode == ipamOption.IPAMDelegatedPlugin {
+		// Prevent cilium agent from trying to release the IP when the endpoint is deleted.
+		ep.DatapathConfiguration.ExternalIpam = true
+	}
+
+	state := &CmdState{
+		HostAddr: ipam.HostAddressing,
+	}
+
+	return state, ep, nil
+}
diff --git a/plugins/cilium-offload-cni/cmd/interface.go b/plugins/cilium-offload-cni/cmd/interface.go
new file mode 100644
index 0000000000..9c26391416
--- /dev/null
+++ b/plugins/cilium-offload-cni/cmd/interface.go
@@ -0,0 +1,69 @@
+// SPDX-License-Identifier: Apache-2.0
+// Copyright Authors of Cilium
+
+package cmd
+
+import (
+	"fmt"
+	"net"
+
+	current "github.com/containernetworking/cni/pkg/types/100"
+
+	"github.com/cilium/cilium/api/v1/models"
+	linuxrouting "github.com/cilium/cilium/pkg/datapath/linux/routing"
+	"github.com/cilium/cilium/pkg/ip"
+)
+
+func interfaceAdd(ipConfig *current.IPConfig, ipam *models.IPAMAddressResponse, conf *models.DaemonConfigurationStatus) error {
+	// If the gateway IP is not available, it is already set up
+	if ipam.Gateway == "" {
+		return nil
+	}
+
+	var masq bool
+	if ipConfig.Address.IP.To4() != nil {
+		masq = conf.MasqueradeProtocols.IPV4
+	} else {
+		masq = conf.MasqueradeProtocols.IPV6
+	}
+
+	allCIDRs := make([]*net.IPNet, 0, len(ipam.Cidrs))
+	for _, cidrString := range ipam.Cidrs {
+		_, cidr, err := net.ParseCIDR(cidrString)
+		if err != nil {
+			return fmt.Errorf("invalid CIDR '%s': %w", cidrString, err)
+		}
+		allCIDRs = append(allCIDRs, cidr)
+	}
+	// Coalesce CIDRs into minimum set needed for route rules
+	// The routes set up here will be cleaned up by linuxrouting.Delete.
+	// Therefor the code here should be kept in sync with the deletion code.
+	ipv4CIDRs, _ := ip.CoalesceCIDRs(allCIDRs)
+	cidrs := make([]string, 0, len(ipv4CIDRs))
+	for _, cidr := range ipv4CIDRs {
+		cidrs = append(cidrs, cidr.String())
+	}
+
+	routingInfo, err := linuxrouting.NewRoutingInfo(
+		ipam.Gateway,
+		cidrs,
+		ipam.MasterMac,
+		ipam.InterfaceNumber,
+		conf.IpamMode,
+		masq,
+	)
+	if err != nil {
+		return fmt.Errorf("unable to parse routing info: %w", err)
+	}
+
+	if err := routingInfo.Configure(
+		ipConfig.Address.IP,
+		int(conf.DeviceMTU),
+		conf.EgressMultiHomeIPRuleCompat,
+		false,
+	); err != nil {
+		return fmt.Errorf("unable to install ip rules and routes: %w", err)
+	}
+
+	return nil
+}
diff --git a/plugins/cilium-offload-cni/main.go b/plugins/cilium-offload-cni/main.go
new file mode 100644
index 0000000000..2b040281bd
--- /dev/null
+++ b/plugins/cilium-offload-cni/main.go
@@ -0,0 +1,27 @@
+// SPDX-License-Identifier: Apache-2.0
+// Copyright Authors of Cilium
+
+package main
+
+import (
+	"os"
+	"runtime"
+
+	"github.com/containernetworking/cni/pkg/skel"
+	cniVersion "github.com/containernetworking/cni/pkg/version"
+
+	"github.com/cilium/cilium/pkg/version"
+	"github.com/cilium/cilium/plugins/cilium-offload-cni/cmd"
+)
+
+func init() {
+	runtime.LockOSThread()
+}
+
+func main() {
+	os.Setenv("CNI_NETNS_OVERRIDE", "TRUE")
+	c := cmd.NewCmd()
+	skel.PluginMainFuncs(c.CNIFuncs(),
+		cniVersion.PluginSupports("0.1.0", "0.2.0", "0.3.0", "0.3.1", "0.4.0", "1.0.0"),
+		"Cilium CNI plugin "+version.Version)
+}
diff --git a/vendor/modules.txt b/vendor/modules.txt
index 4a19f558f3..3ba1eee6b9 100644
--- a/vendor/modules.txt
+++ b/vendor/modules.txt
@@ -97,6 +97,9 @@ github.com/aliyun/alibaba-cloud-sdk-go/services/vpc
 # github.com/antlr4-go/antlr/v4 v4.13.0
 ## explicit; go 1.20
 github.com/antlr4-go/antlr/v4
+# github.com/armon/go-metrics v0.4.1
+## explicit; go 1.12
+github.com/armon/go-metrics
 # github.com/asaskevich/govalidator v0.0.0-20230301143203-a9d515a09cc2
 ## explicit; go 1.13
 github.com/asaskevich/govalidator
@@ -225,6 +228,9 @@ github.com/chai2010/gettext-go/po
 # github.com/cilium/charts v0.0.0-20241006222739-d4ea3601d819
 ## explicit; go 1.17
 github.com/cilium/charts
+# github.com/cilium/checkmate v1.0.3
+## explicit; go 1.11
+github.com/cilium/checkmate
 # github.com/cilium/coverbee v0.3.3-0.20240723084546-664438750fce
 ## explicit; go 1.21
 github.com/cilium/coverbee
@@ -614,6 +620,9 @@ github.com/containernetworking/cni/pkg/types/create
 github.com/containernetworking/cni/pkg/types/internal
 github.com/containernetworking/cni/pkg/utils
 github.com/containernetworking/cni/pkg/version
+# github.com/containernetworking/plugins v1.2.0
+## explicit; go 1.17
+github.com/containernetworking/plugins/pkg/ns
 # github.com/coreos/go-semver v0.3.1
 ## explicit; go 1.8
 github.com/coreos/go-semver/semver
@@ -978,18 +987,33 @@ github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/timeout
 # github.com/grpc-ecosystem/go-grpc-prometheus v1.2.0
 ## explicit
 github.com/grpc-ecosystem/go-grpc-prometheus
+# github.com/hashicorp/consul/api v1.28.2
+## explicit; go 1.19
+github.com/hashicorp/consul/api
 # github.com/hashicorp/errwrap v1.1.0
 ## explicit
 github.com/hashicorp/errwrap
+# github.com/hashicorp/go-cleanhttp v0.5.2
+## explicit; go 1.13
+github.com/hashicorp/go-cleanhttp
 # github.com/hashicorp/go-hclog v1.6.3
 ## explicit; go 1.13
 github.com/hashicorp/go-hclog
+# github.com/hashicorp/go-immutable-radix v1.3.1
+## explicit
+github.com/hashicorp/go-immutable-radix
 # github.com/hashicorp/go-immutable-radix/v2 v2.1.0
 ## explicit; go 1.18
 github.com/hashicorp/go-immutable-radix/v2
 # github.com/hashicorp/go-multierror v1.1.1
 ## explicit; go 1.13
 github.com/hashicorp/go-multierror
+# github.com/hashicorp/go-rootcerts v1.0.2
+## explicit; go 1.12
+github.com/hashicorp/go-rootcerts
+# github.com/hashicorp/golang-lru v0.5.4
+## explicit; go 1.12
+github.com/hashicorp/golang-lru/simplelru
 # github.com/hashicorp/golang-lru/v2 v2.0.7
 ## explicit; go 1.18
 github.com/hashicorp/golang-lru/v2
@@ -1007,6 +1031,9 @@ github.com/hashicorp/hcl/hcl/token
 github.com/hashicorp/hcl/json/parser
 github.com/hashicorp/hcl/json/scanner
 github.com/hashicorp/hcl/json/token
+# github.com/hashicorp/serf v0.10.1
+## explicit; go 1.12
+github.com/hashicorp/serf/coordinate
 # github.com/huandu/xstrings v1.5.0
 ## explicit; go 1.12
 github.com/huandu/xstrings
@@ -1054,6 +1081,12 @@ github.com/klauspost/compress/internal/cpuinfo
 github.com/klauspost/compress/internal/snapref
 github.com/klauspost/compress/zstd
 github.com/klauspost/compress/zstd/internal/xxhash
+# github.com/kr/pretty v0.3.1
+## explicit; go 1.12
+github.com/kr/pretty
+# github.com/kr/text v0.2.0
+## explicit
+github.com/kr/text
 # github.com/kylelemons/godebug v1.1.0
 ## explicit; go 1.11
 github.com/kylelemons/godebug/diff
@@ -1296,6 +1329,9 @@ github.com/prometheus/procfs/internal/util
 # github.com/rivo/uniseg v0.4.4
 ## explicit; go 1.18
 github.com/rivo/uniseg
+# github.com/rogpeppe/go-internal v1.12.0
+## explicit; go 1.20
+github.com/rogpeppe/go-internal/fmtsort
 # github.com/rubenv/sql-migrate v1.7.0
 ## explicit; go 1.21
 github.com/rubenv/sql-migrate
-- 
2.25.1

